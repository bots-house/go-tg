// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminLot Лот.
//
// swagger:model AdminLot
type AdminLot struct {

	// ID лота.
	// Required: true
	ID *int64 `json:"id"`

	// user
	// Required: true
	User *User `json:"user"`

	// Внешний ID.
	// Required: true
	ExternalID *int64 `json:"external_id"`

	// Название лота.
	// Required: true
	Name *string `json:"name"`

	// Ссылка на аватарку.
	// Required: true
	Avatar *string `json:"avatar"`

	// Юзернейм канала.
	// Required: true
	Username *string `json:"username"`

	// Приватная ссылка на канал.
	// Required: true
	JoinLink *string `json:"join_link"`

	// status
	// Required: true
	// Enum: [created paid published declined canceled]
	Status *string `json:"status"`

	// Текст причины снятия лота.
	// Required: true
	CanceledReason *string `json:"canceled_reason"`

	// price
	// Required: true
	Price *LotPrice `json:"price"`

	// topics
	// Required: true
	Topics []int64 `json:"topics"`

	// Дата создания.
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// Дата оплаты.
	// Required: true
	PaidAt *int64 `json:"paid_at"`

	// Дата одобрения.
	// Required: true
	ApprovedAt *int64 `json:"approved_at"`

	// Дата публикации.
	// Required: true
	PublishedAt *int64 `json:"published_at"`

	// files
	// Required: true
	Files []*AdminLotUploadedFile `json:"files"`
}

// Validate validates this admin lot
func (m *AdminLot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanceledReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminLot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *AdminLot) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("external_id", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateJoinLink(formats strfmt.Registry) error {

	if err := validate.Required("join_link", "body", m.JoinLink); err != nil {
		return err
	}

	return nil
}

var adminLotTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","paid","published","declined","canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adminLotTypeStatusPropEnum = append(adminLotTypeStatusPropEnum, v)
	}
}

const (

	// AdminLotStatusCreated captures enum value "created"
	AdminLotStatusCreated string = "created"

	// AdminLotStatusPaid captures enum value "paid"
	AdminLotStatusPaid string = "paid"

	// AdminLotStatusPublished captures enum value "published"
	AdminLotStatusPublished string = "published"

	// AdminLotStatusDeclined captures enum value "declined"
	AdminLotStatusDeclined string = "declined"

	// AdminLotStatusCanceled captures enum value "canceled"
	AdminLotStatusCanceled string = "canceled"
)

// prop value enum
func (m *AdminLot) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adminLotTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdminLot) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateCanceledReason(formats strfmt.Registry) error {

	if err := validate.Required("canceled_reason", "body", m.CanceledReason); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *AdminLot) validateTopics(formats strfmt.Registry) error {

	if err := validate.Required("topics", "body", m.Topics); err != nil {
		return err
	}

	for i := 0; i < len(m.Topics); i++ {

		if err := validate.MinLength("topics"+"."+strconv.Itoa(i), "body", string(m.Topics[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("topics"+"."+strconv.Itoa(i), "body", string(m.Topics[i]), 3); err != nil {
			return err
		}

	}

	return nil
}

func (m *AdminLot) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validatePaidAt(formats strfmt.Registry) error {

	if err := validate.Required("paid_at", "body", m.PaidAt); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateApprovedAt(formats strfmt.Registry) error {

	if err := validate.Required("approved_at", "body", m.ApprovedAt); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validatePublishedAt(formats strfmt.Registry) error {

	if err := validate.Required("published_at", "body", m.PublishedAt); err != nil {
		return err
	}

	return nil
}

func (m *AdminLot) validateFiles(formats strfmt.Registry) error {

	if err := validate.Required("files", "body", m.Files); err != nil {
		return err
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminLot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminLot) UnmarshalBinary(b []byte) error {
	var res AdminLot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
