// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminSettings admin settings
//
// swagger:model AdminSettings
type AdminSettings struct {

	// prices
	// Required: true
	Prices *AdminSettingsPrices `json:"prices"`

	// channel
	// Required: true
	Channel *AdminSettingsChannel `json:"channel"`

	// topics
	// Required: true
	Topics []*Topic `json:"topics"`

	// lot canceled reasons
	// Required: true
	LotCanceledReasons []*LotCanceledReason `json:"lot_canceled_reasons"`
}

// Validate validates this admin settings
func (m *AdminSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLotCanceledReasons(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminSettings) validatePrices(formats strfmt.Registry) error {

	if err := validate.Required("prices", "body", m.Prices); err != nil {
		return err
	}

	if m.Prices != nil {
		if err := m.Prices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prices")
			}
			return err
		}
	}

	return nil
}

func (m *AdminSettings) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("channel", "body", m.Channel); err != nil {
		return err
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

func (m *AdminSettings) validateTopics(formats strfmt.Registry) error {

	if err := validate.Required("topics", "body", m.Topics); err != nil {
		return err
	}

	for i := 0; i < len(m.Topics); i++ {
		if swag.IsZero(m.Topics[i]) { // not required
			continue
		}

		if m.Topics[i] != nil {
			if err := m.Topics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdminSettings) validateLotCanceledReasons(formats strfmt.Registry) error {

	if err := validate.Required("lot_canceled_reasons", "body", m.LotCanceledReasons); err != nil {
		return err
	}

	for i := 0; i < len(m.LotCanceledReasons); i++ {
		if swag.IsZero(m.LotCanceledReasons[i]) { // not required
			continue
		}

		if m.LotCanceledReasons[i] != nil {
			if err := m.LotCanceledReasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lot_canceled_reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminSettings) UnmarshalBinary(b []byte) error {
	var res AdminSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
