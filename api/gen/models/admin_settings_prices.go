// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminSettingsPrices admin settings prices
//
// swagger:model AdminSettingsPrices
type AdminSettingsPrices struct {

	// application
	// Required: true
	Application *Money `json:"application"`

	// change
	// Required: true
	Change *Money `json:"change"`

	// Юзернейм кассы.
	// Required: true
	Cashier *string `json:"cashier"`
}

// Validate validates this admin settings prices
func (m *AdminSettingsPrices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminSettingsPrices) validateApplication(formats strfmt.Registry) error {

	if err := validate.Required("application", "body", m.Application); err != nil {
		return err
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *AdminSettingsPrices) validateChange(formats strfmt.Registry) error {

	if err := validate.Required("change", "body", m.Change); err != nil {
		return err
	}

	if m.Change != nil {
		if err := m.Change.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("change")
			}
			return err
		}
	}

	return nil
}

func (m *AdminSettingsPrices) validateCashier(formats strfmt.Registry) error {

	if err := validate.Required("cashier", "body", m.Cashier); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminSettingsPrices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminSettingsPrices) UnmarshalBinary(b []byte) error {
	var res AdminSettingsPrices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
