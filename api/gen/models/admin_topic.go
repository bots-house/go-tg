// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminTopic Категория лота
//
// swagger:model AdminTopic
type AdminTopic struct {

	// Уникальный ID категории.
	// Required: true
	ID *int64 `json:"id"`

	// Название категории на русском.
	// Required: true
	Name *string `json:"name"`

	// Slug (уникальный)
	// Required: true
	Slug *string `json:"slug"`

	// Количетсво лотов по данному топику.
	// Required: true
	Lots *int64 `json:"lots"`

	// Дата создания
	// Required: true
	CreatedAt *int64 `json:"created_at"`
}

// Validate validates this admin topic
func (m *AdminTopic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminTopic) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AdminTopic) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AdminTopic) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

func (m *AdminTopic) validateLots(formats strfmt.Registry) error {

	if err := validate.Required("lots", "body", m.Lots); err != nil {
		return err
	}

	return nil
}

func (m *AdminTopic) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminTopic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminTopic) UnmarshalBinary(b []byte) error {
	var res AdminTopic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
