// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationInvoice application invoice
//
// swagger:model ApplicationInvoice
type ApplicationInvoice struct {

	// lot
	// Required: true
	Lot *OwnedLot `json:"lot"`

	// Цена размещения
	// Required: true
	Price *Money `json:"price"`

	// gateways
	// Required: true
	Gateways []string `json:"gateways"`

	// cashier
	Cashier *ApplicationInvoiceCashier `json:"cashier,omitempty"`
}

// Validate validates this application invoice
func (m *ApplicationInvoice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateways(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationInvoice) validateLot(formats strfmt.Registry) error {

	if err := validate.Required("lot", "body", m.Lot); err != nil {
		return err
	}

	if m.Lot != nil {
		if err := m.Lot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lot")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationInvoice) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

var applicationInvoiceGatewaysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["interkassa","direct"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationInvoiceGatewaysItemsEnum = append(applicationInvoiceGatewaysItemsEnum, v)
	}
}

func (m *ApplicationInvoice) validateGatewaysItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationInvoiceGatewaysItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationInvoice) validateGateways(formats strfmt.Registry) error {

	if err := validate.Required("gateways", "body", m.Gateways); err != nil {
		return err
	}

	for i := 0; i < len(m.Gateways); i++ {

		// value enum
		if err := m.validateGatewaysItemsEnum("gateways"+"."+strconv.Itoa(i), "body", m.Gateways[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ApplicationInvoice) validateCashier(formats strfmt.Registry) error {

	if swag.IsZero(m.Cashier) { // not required
		return nil
	}

	if m.Cashier != nil {
		if err := m.Cashier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cashier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationInvoice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationInvoice) UnmarshalBinary(b []byte) error {
	var res ApplicationInvoice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationInvoiceCashier Содержит контакты человека для приема оплат напрямую.
//
//
// swagger:model ApplicationInvoiceCashier
type ApplicationInvoiceCashier struct {

	// username
	// Required: true
	Username *string `json:"username"`

	// link
	// Required: true
	Link *string `json:"link"`
}

// Validate validates this application invoice cashier
func (m *ApplicationInvoiceCashier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationInvoiceCashier) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("cashier"+"."+"username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationInvoiceCashier) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("cashier"+"."+"link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationInvoiceCashier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationInvoiceCashier) UnmarshalBinary(b []byte) error {
	var res ApplicationInvoiceCashier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
