// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BotInfo Информация о боте
//
// swagger:model BotInfo
type BotInfo struct {

	// Имя бота
	// Required: true
	Name *string `json:"name"`

	// Юзернейм бота
	// Required: true
	Username *string `json:"username"`

	// Значение параметра `?start=` который нужно передать при формировании URL для авторизации через `LoginUrl`.
	// Required: true
	AuthDeepLink *string `json:"auth_deep_link"`
}

// Validate validates this bot info
func (m *BotInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthDeepLink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BotInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BotInfo) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *BotInfo) validateAuthDeepLink(formats strfmt.Registry) error {

	if err := validate.Required("auth_deep_link", "body", m.AuthDeepLink); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BotInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BotInfo) UnmarshalBinary(b []byte) error {
	var res BotInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
