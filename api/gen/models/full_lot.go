// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FullLot Детали лота.
//
// swagger:model FullLot
type FullLot struct {
	LotListItem

	// extra
	// Required: true
	Extra []*LotExtraResource `json:"extra"`

	// Ссылка на telemetr.me.
	// Required: true
	TelemetrLink *string `json:"telemetr_link"`

	// Ссылка на tgstat.ru.
	// Required: true
	TgstatLink *string `json:"tgstat_link"`

	// user
	// Required: true
	User *LotOwner `json:"user"`

	// Количество просмотров.
	// Required: true
	Views *int64 `json:"views"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FullLot) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 LotListItem
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.LotListItem = aO0

	// AO1
	var dataAO1 struct {
		Extra []*LotExtraResource `json:"extra"`

		TelemetrLink *string `json:"telemetr_link"`

		TgstatLink *string `json:"tgstat_link"`

		User *LotOwner `json:"user"`

		Views *int64 `json:"views"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Extra = dataAO1.Extra

	m.TelemetrLink = dataAO1.TelemetrLink

	m.TgstatLink = dataAO1.TgstatLink

	m.User = dataAO1.User

	m.Views = dataAO1.Views

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FullLot) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.LotListItem)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Extra []*LotExtraResource `json:"extra"`

		TelemetrLink *string `json:"telemetr_link"`

		TgstatLink *string `json:"tgstat_link"`

		User *LotOwner `json:"user"`

		Views *int64 `json:"views"`
	}

	dataAO1.Extra = m.Extra

	dataAO1.TelemetrLink = m.TelemetrLink

	dataAO1.TgstatLink = m.TgstatLink

	dataAO1.User = m.User

	dataAO1.Views = m.Views

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this full lot
func (m *FullLot) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with LotListItem
	if err := m.LotListItem.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtra(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelemetrLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTgstatLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViews(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullLot) validateExtra(formats strfmt.Registry) error {

	if err := validate.Required("extra", "body", m.Extra); err != nil {
		return err
	}

	for i := 0; i < len(m.Extra); i++ {
		if swag.IsZero(m.Extra[i]) { // not required
			continue
		}

		if m.Extra[i] != nil {
			if err := m.Extra[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extra" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FullLot) validateTelemetrLink(formats strfmt.Registry) error {

	if err := validate.Required("telemetr_link", "body", m.TelemetrLink); err != nil {
		return err
	}

	return nil
}

func (m *FullLot) validateTgstatLink(formats strfmt.Registry) error {

	if err := validate.Required("tgstat_link", "body", m.TgstatLink); err != nil {
		return err
	}

	return nil
}

func (m *FullLot) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *FullLot) validateViews(formats strfmt.Registry) error {

	if err := validate.Required("views", "body", m.Views); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FullLot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FullLot) UnmarshalBinary(b []byte) error {
	var res FullLot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
