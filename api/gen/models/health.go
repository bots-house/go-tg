// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Health Результат проверки состояния зависимостей сервиса.
//
// swagger:model Health
type Health struct {

	// True, если все сервисы живи
	// Required: true
	Ok *bool `json:"ok"`

	// Postgres
	// Required: true
	Postgres *HealthCheck `json:"postgres"`

	// Redis
	// Required: true
	Redis *HealthCheck `json:"redis"`
}

// Validate validates this health
func (m *Health) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostgres(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedis(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Health) validateOk(formats strfmt.Registry) error {

	if err := validate.Required("ok", "body", m.Ok); err != nil {
		return err
	}

	return nil
}

func (m *Health) validatePostgres(formats strfmt.Registry) error {

	if err := validate.Required("postgres", "body", m.Postgres); err != nil {
		return err
	}

	if m.Postgres != nil {
		if err := m.Postgres.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postgres")
			}
			return err
		}
	}

	return nil
}

func (m *Health) validateRedis(formats strfmt.Registry) error {

	if err := validate.Required("redis", "body", m.Redis); err != nil {
		return err
	}

	if m.Redis != nil {
		if err := m.Redis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redis")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Health) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Health) UnmarshalBinary(b []byte) error {
	var res Health
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
