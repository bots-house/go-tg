// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InputAdminLot input admin lot
//
// swagger:model InputAdminLot
type InputAdminLot struct {

	// topics
	// Required: true
	Topics []int64 `json:"topics"`

	// Цена.
	// Required: true
	Price *int64 `json:"price"`

	// Доход.
	// Required: true
	MonthlyIncome *int64 `json:"monthly_income"`

	// Комментарий.
	// Required: true
	Comment *string `json:"comment"`

	// extra
	// Required: true
	Extra []*LotExtraResource `json:"extra"`
}

// Validate validates this input admin lot
func (m *InputAdminLot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTopics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlyIncome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtra(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputAdminLot) validateTopics(formats strfmt.Registry) error {

	if err := validate.Required("topics", "body", m.Topics); err != nil {
		return err
	}

	for i := 0; i < len(m.Topics); i++ {

		if err := validate.MinLength("topics"+"."+strconv.Itoa(i), "body", string(m.Topics[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("topics"+"."+strconv.Itoa(i), "body", string(m.Topics[i]), 3); err != nil {
			return err
		}

	}

	return nil
}

func (m *InputAdminLot) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *InputAdminLot) validateMonthlyIncome(formats strfmt.Registry) error {

	if err := validate.Required("monthly_income", "body", m.MonthlyIncome); err != nil {
		return err
	}

	return nil
}

func (m *InputAdminLot) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *InputAdminLot) validateExtra(formats strfmt.Registry) error {

	if err := validate.Required("extra", "body", m.Extra); err != nil {
		return err
	}

	for i := 0; i < len(m.Extra); i++ {
		if swag.IsZero(m.Extra[i]) { // not required
			continue
		}

		if m.Extra[i] != nil {
			if err := m.Extra[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extra" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputAdminLot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputAdminLot) UnmarshalBinary(b []byte) error {
	var res InputAdminLot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
