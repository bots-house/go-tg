// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InputAdminSettings input admin settings
//
// swagger:model InputAdminSettings
type InputAdminSettings struct {

	// prices
	// Required: true
	Prices *AdminSettingsPrices `json:"prices"`

	// channel
	// Required: true
	Channel *AdminSettingsChannel `json:"channel"`
}

// Validate validates this input admin settings
func (m *InputAdminSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputAdminSettings) validatePrices(formats strfmt.Registry) error {

	if err := validate.Required("prices", "body", m.Prices); err != nil {
		return err
	}

	if m.Prices != nil {
		if err := m.Prices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prices")
			}
			return err
		}
	}

	return nil
}

func (m *InputAdminSettings) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("channel", "body", m.Channel); err != nil {
		return err
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputAdminSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputAdminSettings) UnmarshalBinary(b []byte) error {
	var res InputAdminSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
