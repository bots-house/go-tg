// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InputAuth Данный полученные с [Telegram Login Widget](https://core.telegram.org/widgets/login) и [LoginUrl](https://core.telegram.org/bots/api#loginurl).
//
// swagger:model InputAuth
type InputAuth struct {

	// ID пользователя в Telegram
	// Required: true
	ID *int64 `json:"id"`

	// Имя пользователя в Telegram
	// Required: true
	FirstName *string `json:"first_name"`

	// Фамилия пользователя в Telegram
	LastName string `json:"last_name,omitempty"`

	// Username пользователя в Telegram
	Username string `json:"username,omitempty"`

	// Ссылка на авартку пользователя.
	PhotoURL string `json:"photo_url,omitempty"`

	// Дата авторизации пользователя (UNIX)
	// Required: true
	AuthDate *int64 `json:"auth_date"`

	// Подписи к данным.
	// Required: true
	Hash *string `json:"hash"`
}

// Validate validates this input auth
func (m *InputAuth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputAuth) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InputAuth) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *InputAuth) validateAuthDate(formats strfmt.Registry) error {

	if err := validate.Required("auth_date", "body", m.AuthDate); err != nil {
		return err
	}

	return nil
}

func (m *InputAuth) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputAuth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputAuth) UnmarshalBinary(b []byte) error {
	var res InputAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
