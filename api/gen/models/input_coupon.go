// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InputCoupon input coupon
//
// swagger:model InputCoupon
type InputCoupon struct {

	// Код купона.
	// Required: true
	Code *string `json:"code"`

	// Скидка (пример: 0.1 = 10%)
	//
	// Required: true
	Discount *float64 `json:"discount"`

	// Для каких типов платежей применим.
	// Required: true
	// Max Items: 2
	// Min Items: 1
	Purposes []string `json:"purposes"`

	// Дата истечения купона.
	ExpireAt int64 `json:"expire_at,omitempty"`

	// Сколько может применятся одним пользователем.
	MaxAppliesByUserLimit int64 `json:"max_applies_by_user_limit,omitempty"`

	// Количество применений всеми пользователями.
	MaxAppliesLimit int64 `json:"max_applies_limit,omitempty"`
}

// Validate validates this input coupon
func (m *InputCoupon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurposes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputCoupon) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *InputCoupon) validateDiscount(formats strfmt.Registry) error {

	if err := validate.Required("discount", "body", m.Discount); err != nil {
		return err
	}

	return nil
}

var inputCouponPurposesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["application","change_price"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inputCouponPurposesItemsEnum = append(inputCouponPurposesItemsEnum, v)
	}
}

func (m *InputCoupon) validatePurposesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, inputCouponPurposesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InputCoupon) validatePurposes(formats strfmt.Registry) error {

	if err := validate.Required("purposes", "body", m.Purposes); err != nil {
		return err
	}

	iPurposesSize := int64(len(m.Purposes))

	if err := validate.MinItems("purposes", "body", iPurposesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("purposes", "body", iPurposesSize, 2); err != nil {
		return err
	}

	for i := 0; i < len(m.Purposes); i++ {

		// value enum
		if err := m.validatePurposesItemsEnum("purposes"+"."+strconv.Itoa(i), "body", m.Purposes[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputCoupon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputCoupon) UnmarshalBinary(b []byte) error {
	var res InputCoupon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
