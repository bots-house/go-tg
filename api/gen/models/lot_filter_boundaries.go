// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LotFilterBoundaries lot filter boundaries
//
// swagger:model LotFilterBoundaries
type LotFilterBoundaries struct {

	// members count
	// Required: true
	MembersCount *IntBoundaries `json:"members_count"`

	// price
	// Required: true
	Price *IntBoundaries `json:"price"`

	// price per member
	// Required: true
	PricePerMember *FloatBoundaries `json:"price_per_member"`

	// price per view
	// Required: true
	PricePerView *FloatBoundaries `json:"price_per_view"`

	// daily coverage
	// Required: true
	DailyCoverage *IntBoundaries `json:"daily_coverage"`

	// monthly income
	// Required: true
	MonthlyIncome *IntBoundaries `json:"monthly_income"`

	// payback period
	// Required: true
	PaybackPeriod *FloatBoundaries `json:"payback_period"`
}

// Validate validates this lot filter boundaries
func (m *LotFilterBoundaries) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembersCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricePerMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricePerView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlyIncome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaybackPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LotFilterBoundaries) validateMembersCount(formats strfmt.Registry) error {

	if err := validate.Required("members_count", "body", m.MembersCount); err != nil {
		return err
	}

	if m.MembersCount != nil {
		if err := m.MembersCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("members_count")
			}
			return err
		}
	}

	return nil
}

func (m *LotFilterBoundaries) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *LotFilterBoundaries) validatePricePerMember(formats strfmt.Registry) error {

	if err := validate.Required("price_per_member", "body", m.PricePerMember); err != nil {
		return err
	}

	if m.PricePerMember != nil {
		if err := m.PricePerMember.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price_per_member")
			}
			return err
		}
	}

	return nil
}

func (m *LotFilterBoundaries) validatePricePerView(formats strfmt.Registry) error {

	if err := validate.Required("price_per_view", "body", m.PricePerView); err != nil {
		return err
	}

	if m.PricePerView != nil {
		if err := m.PricePerView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price_per_view")
			}
			return err
		}
	}

	return nil
}

func (m *LotFilterBoundaries) validateDailyCoverage(formats strfmt.Registry) error {

	if err := validate.Required("daily_coverage", "body", m.DailyCoverage); err != nil {
		return err
	}

	if m.DailyCoverage != nil {
		if err := m.DailyCoverage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daily_coverage")
			}
			return err
		}
	}

	return nil
}

func (m *LotFilterBoundaries) validateMonthlyIncome(formats strfmt.Registry) error {

	if err := validate.Required("monthly_income", "body", m.MonthlyIncome); err != nil {
		return err
	}

	if m.MonthlyIncome != nil {
		if err := m.MonthlyIncome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthly_income")
			}
			return err
		}
	}

	return nil
}

func (m *LotFilterBoundaries) validatePaybackPeriod(formats strfmt.Registry) error {

	if err := validate.Required("payback_period", "body", m.PaybackPeriod); err != nil {
		return err
	}

	if m.PaybackPeriod != nil {
		if err := m.PaybackPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payback_period")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LotFilterBoundaries) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LotFilterBoundaries) UnmarshalBinary(b []byte) error {
	var res LotFilterBoundaries
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
