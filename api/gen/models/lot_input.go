// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LotInput Данные для создания нового лота
//
// swagger:model LotInput
type LotInput struct {

	// Запрос пользователя, @username или приватная ссылка.
	// Required: true
	Query *string `json:"query"`

	// ID канала в Telegram
	// Required: true
	TelegramID *int64 `json:"telegram_id"`

	// Список категорий лота
	// Required: true
	TopicIds []int64 `json:"topic_ids"`

	// Цена канала
	// Required: true
	Price *int64 `json:"price"`

	// Возможен ли торг?
	// Required: true
	IsBargain *bool `json:"is_bargain"`

	// Доход в месяц
	// Required: true
	MonthlyIncome *int64 `json:"monthly_income"`

	// Комментарий пользователя
	// Required: true
	Comment *string `json:"comment"`

	// Список ссылок на дополнительные ресурсы
	// Required: true
	Extra []string `json:"extra"`
}

// Validate validates this lot input
func (m *LotInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelegramID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopicIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBargain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlyIncome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtra(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LotInput) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

func (m *LotInput) validateTelegramID(formats strfmt.Registry) error {

	if err := validate.Required("telegram_id", "body", m.TelegramID); err != nil {
		return err
	}

	return nil
}

func (m *LotInput) validateTopicIds(formats strfmt.Registry) error {

	if err := validate.Required("topic_ids", "body", m.TopicIds); err != nil {
		return err
	}

	for i := 0; i < len(m.TopicIds); i++ {

		if err := validate.MinLength("topic_ids"+"."+strconv.Itoa(i), "body", string(m.TopicIds[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("topic_ids"+"."+strconv.Itoa(i), "body", string(m.TopicIds[i]), 3); err != nil {
			return err
		}

	}

	return nil
}

func (m *LotInput) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *LotInput) validateIsBargain(formats strfmt.Registry) error {

	if err := validate.Required("is_bargain", "body", m.IsBargain); err != nil {
		return err
	}

	return nil
}

func (m *LotInput) validateMonthlyIncome(formats strfmt.Registry) error {

	if err := validate.Required("monthly_income", "body", m.MonthlyIncome); err != nil {
		return err
	}

	return nil
}

func (m *LotInput) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *LotInput) validateExtra(formats strfmt.Registry) error {

	if err := validate.Required("extra", "body", m.Extra); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LotInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LotInput) UnmarshalBinary(b []byte) error {
	var res LotInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
