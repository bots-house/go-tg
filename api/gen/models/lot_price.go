// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LotPrice lot price
//
// swagger:model LotPrice
type LotPrice struct {

	// Цена канала
	// Required: true
	Current *int64 `json:"current"`

	// Предыдущая цена канала
	// Required: true
	Previous *int64 `json:"previous"`

	// Возможен ли торг
	// Required: true
	IsBargain *bool `json:"is_bargain"`
}

// Validate validates this lot price
func (m *LotPrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevious(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBargain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LotPrice) validateCurrent(formats strfmt.Registry) error {

	if err := validate.Required("current", "body", m.Current); err != nil {
		return err
	}

	return nil
}

func (m *LotPrice) validatePrevious(formats strfmt.Registry) error {

	if err := validate.Required("previous", "body", m.Previous); err != nil {
		return err
	}

	return nil
}

func (m *LotPrice) validateIsBargain(formats strfmt.Registry) error {

	if err := validate.Required("is_bargain", "body", m.IsBargain); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LotPrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LotPrice) UnmarshalBinary(b []byte) error {
	var res LotPrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
