// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LotStatusesCount Статусы лотов и количество лотов по ним.
//
// swagger:model LotStatusesCount
type LotStatusesCount struct {

	// Количество созданых лотов.
	// Required: true
	Created *int64 `json:"created"`

	// Количество оплаченых лотов.
	// Required: true
	Paid *int64 `json:"paid"`

	// Количество опубликованых лотов.
	// Required: true
	Published *int64 `json:"published"`

	// Количество отклоненных лотов.
	// Required: true
	Declined *int64 `json:"declined"`

	// Количество лотов запланированных к публикации.
	// Required: true
	Scheduled *int64 `json:"scheduled"`

	// Количество отмененных лотов.
	// Required: true
	Canceled *int64 `json:"canceled"`
}

// Validate validates this lot statuses count
func (m *LotStatusesCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeclined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanceled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LotStatusesCount) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *LotStatusesCount) validatePaid(formats strfmt.Registry) error {

	if err := validate.Required("paid", "body", m.Paid); err != nil {
		return err
	}

	return nil
}

func (m *LotStatusesCount) validatePublished(formats strfmt.Registry) error {

	if err := validate.Required("published", "body", m.Published); err != nil {
		return err
	}

	return nil
}

func (m *LotStatusesCount) validateDeclined(formats strfmt.Registry) error {

	if err := validate.Required("declined", "body", m.Declined); err != nil {
		return err
	}

	return nil
}

func (m *LotStatusesCount) validateScheduled(formats strfmt.Registry) error {

	if err := validate.Required("scheduled", "body", m.Scheduled); err != nil {
		return err
	}

	return nil
}

func (m *LotStatusesCount) validateCanceled(formats strfmt.Registry) error {

	if err := validate.Required("canceled", "body", m.Canceled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LotStatusesCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LotStatusesCount) UnmarshalBinary(b []byte) error {
	var res LotStatusesCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
