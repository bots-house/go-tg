// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OwnedLot Данные лота которым владает пользователь
//
// swagger:model OwnedLot
type OwnedLot struct {

	// ID лота
	// Required: true
	ID *int64 `json:"id"`

	// ID лота в Telegram
	// Required: true
	ExternalID *int64 `json:"external_id"`

	// Название лота (канала) в Telegram
	// Required: true
	Name *string `json:"name"`

	// Аватарка лота
	// Required: true
	Avatar *string `json:"avatar"`

	// Ссылка для вступления (как приватная так и публичная)
	// Required: true
	Link *string `json:"link"`

	// Описаник канала с Telegram
	// Required: true
	Bio *string `json:"bio"`

	// price
	// Required: true
	Price *LotPrice `json:"price"`

	// Комментарий к лоту
	// Required: true
	Comment *string `json:"comment"`

	// metrics
	// Required: true
	Metrics *LotMetrics `json:"metrics"`

	// Дата создания
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// Дата оплаты
	// Required: true
	PaidAt *int64 `json:"paid_at"`

	// Дата проверки
	// Required: true
	ApprovedAt *int64 `json:"approved_at"`

	// topics
	// Required: true
	Topics []*Topic `json:"topics"`

	// extra
	// Required: true
	Extra []*LotExtraResource `json:"extra"`

	// Дата публикации в канале
	// Required: true
	PublishedAt *int64 `json:"published_at"`
}

// Validate validates this owned lot
func (m *OwnedLot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtra(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OwnedLot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("external_id", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateBio(formats strfmt.Registry) error {

	if err := validate.Required("bio", "body", m.Bio); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *OwnedLot) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("metrics", "body", m.Metrics); err != nil {
		return err
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *OwnedLot) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validatePaidAt(formats strfmt.Registry) error {

	if err := validate.Required("paid_at", "body", m.PaidAt); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateApprovedAt(formats strfmt.Registry) error {

	if err := validate.Required("approved_at", "body", m.ApprovedAt); err != nil {
		return err
	}

	return nil
}

func (m *OwnedLot) validateTopics(formats strfmt.Registry) error {

	if err := validate.Required("topics", "body", m.Topics); err != nil {
		return err
	}

	for i := 0; i < len(m.Topics); i++ {
		if swag.IsZero(m.Topics[i]) { // not required
			continue
		}

		if m.Topics[i] != nil {
			if err := m.Topics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OwnedLot) validateExtra(formats strfmt.Registry) error {

	if err := validate.Required("extra", "body", m.Extra); err != nil {
		return err
	}

	for i := 0; i < len(m.Extra); i++ {
		if swag.IsZero(m.Extra[i]) { // not required
			continue
		}

		if m.Extra[i] != nil {
			if err := m.Extra[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extra" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OwnedLot) validatePublishedAt(formats strfmt.Registry) error {

	if err := validate.Required("published_at", "body", m.PublishedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OwnedLot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OwnedLot) UnmarshalBinary(b []byte) error {
	var res OwnedLot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
