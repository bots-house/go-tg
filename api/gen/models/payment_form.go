// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentForm payment form
//
// swagger:model PaymentForm
type PaymentForm struct {

	// метод с которым нужно отправить запрос
	// Required: true
	// Enum: [POST GET]
	Method *string `json:"method"`

	// URL на который нужно отправить запрос
	// Required: true
	Action *string `json:"action"`

	// values
	// Required: true
	Values []*PaymentFormValuesItems0 `json:"values"`
}

// Validate validates this payment form
func (m *PaymentForm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var paymentFormTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["POST","GET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentFormTypeMethodPropEnum = append(paymentFormTypeMethodPropEnum, v)
	}
}

const (

	// PaymentFormMethodPOST captures enum value "POST"
	PaymentFormMethodPOST string = "POST"

	// PaymentFormMethodGET captures enum value "GET"
	PaymentFormMethodGET string = "GET"
)

// prop value enum
func (m *PaymentForm) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentFormTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentForm) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *PaymentForm) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *PaymentForm) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentForm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentForm) UnmarshalBinary(b []byte) error {
	var res PaymentForm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentFormValuesItems0 payment form values items0
//
// swagger:model PaymentFormValuesItems0
type PaymentFormValuesItems0 struct {

	// key
	// Required: true
	Key *string `json:"key"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this payment form values items0
func (m *PaymentFormValuesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentFormValuesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *PaymentFormValuesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentFormValuesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentFormValuesItems0) UnmarshalBinary(b []byte) error {
	var res PaymentFormValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
