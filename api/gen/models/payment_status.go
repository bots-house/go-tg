// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentStatus payment status
//
// swagger:model PaymentStatus
type PaymentStatus struct {

	// Статус платежа
	// Required: true
	// Enum: [created pending success failed]
	Status *string `json:"status"`

	// ID лота который относится к данному платежу
	// Required: true
	LotID *int64 `json:"lot_id"`

	// Предназначение оплаты (размещение или изменение цены).
	// Required: true
	// Enum: [application change_price]
	Purpose *string `json:"purpose"`
}

// Validate validates this payment status
func (m *PaymentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurpose(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var paymentStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","pending","success","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentStatusTypeStatusPropEnum = append(paymentStatusTypeStatusPropEnum, v)
	}
}

const (

	// PaymentStatusStatusCreated captures enum value "created"
	PaymentStatusStatusCreated string = "created"

	// PaymentStatusStatusPending captures enum value "pending"
	PaymentStatusStatusPending string = "pending"

	// PaymentStatusStatusSuccess captures enum value "success"
	PaymentStatusStatusSuccess string = "success"

	// PaymentStatusStatusFailed captures enum value "failed"
	PaymentStatusStatusFailed string = "failed"
)

// prop value enum
func (m *PaymentStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PaymentStatus) validateLotID(formats strfmt.Registry) error {

	if err := validate.Required("lot_id", "body", m.LotID); err != nil {
		return err
	}

	return nil
}

var paymentStatusTypePurposePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["application","change_price"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentStatusTypePurposePropEnum = append(paymentStatusTypePurposePropEnum, v)
	}
}

const (

	// PaymentStatusPurposeApplication captures enum value "application"
	PaymentStatusPurposeApplication string = "application"

	// PaymentStatusPurposeChangePrice captures enum value "change_price"
	PaymentStatusPurposeChangePrice string = "change_price"
)

// prop value enum
func (m *PaymentStatus) validatePurposeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentStatusTypePurposePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentStatus) validatePurpose(formats strfmt.Registry) error {

	if err := validate.Required("purpose", "body", m.Purpose); err != nil {
		return err
	}

	// value enum
	if err := m.validatePurposeEnum("purpose", "body", *m.Purpose); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentStatus) UnmarshalBinary(b []byte) error {
	var res PaymentStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
