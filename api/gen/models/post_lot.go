// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostLot post lot
//
// swagger:model PostLot
type PostLot struct {

	// ID лота.
	// Required: true
	ID *int64 `json:"id"`

	// Название лота.
	// Required: true
	Name *string `json:"name"`

	// Юзернейм.
	// Required: true
	Username *string `json:"username"`

	// Ссылка.
	// Required: true
	JoinLink *string `json:"join_link"`

	// Аватарка.
	// Required: true
	Avatar *string `json:"avatar"`
}

// Validate validates this post lot
func (m *PostLot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostLot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PostLot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PostLot) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *PostLot) validateJoinLink(formats strfmt.Registry) error {

	if err := validate.Required("join_link", "body", m.JoinLink); err != nil {
		return err
	}

	return nil
}

func (m *PostLot) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostLot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostLot) UnmarshalBinary(b []byte) error {
	var res PostLot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
