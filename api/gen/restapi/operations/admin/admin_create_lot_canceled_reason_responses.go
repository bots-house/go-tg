// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminCreateLotCanceledReasonOKCode is the HTTP code returned for type AdminCreateLotCanceledReasonOK
const AdminCreateLotCanceledReasonOKCode int = 200

/*AdminCreateLotCanceledReasonOK OK

swagger:response adminCreateLotCanceledReasonOK
*/
type AdminCreateLotCanceledReasonOK struct {

	/*
	  In: Body
	*/
	Payload *models.LotCanceledReason `json:"body,omitempty"`
}

// NewAdminCreateLotCanceledReasonOK creates AdminCreateLotCanceledReasonOK with default headers values
func NewAdminCreateLotCanceledReasonOK() *AdminCreateLotCanceledReasonOK {

	return &AdminCreateLotCanceledReasonOK{}
}

// WithPayload adds the payload to the admin create lot canceled reason o k response
func (o *AdminCreateLotCanceledReasonOK) WithPayload(payload *models.LotCanceledReason) *AdminCreateLotCanceledReasonOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin create lot canceled reason o k response
func (o *AdminCreateLotCanceledReasonOK) SetPayload(payload *models.LotCanceledReason) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminCreateLotCanceledReasonOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminCreateLotCanceledReasonBadRequestCode is the HTTP code returned for type AdminCreateLotCanceledReasonBadRequest
const AdminCreateLotCanceledReasonBadRequestCode int = 400

/*AdminCreateLotCanceledReasonBadRequest Bad Request

swagger:response adminCreateLotCanceledReasonBadRequest
*/
type AdminCreateLotCanceledReasonBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminCreateLotCanceledReasonBadRequest creates AdminCreateLotCanceledReasonBadRequest with default headers values
func NewAdminCreateLotCanceledReasonBadRequest() *AdminCreateLotCanceledReasonBadRequest {

	return &AdminCreateLotCanceledReasonBadRequest{}
}

// WithPayload adds the payload to the admin create lot canceled reason bad request response
func (o *AdminCreateLotCanceledReasonBadRequest) WithPayload(payload *models.Error) *AdminCreateLotCanceledReasonBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin create lot canceled reason bad request response
func (o *AdminCreateLotCanceledReasonBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminCreateLotCanceledReasonBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminCreateLotCanceledReasonInternalServerErrorCode is the HTTP code returned for type AdminCreateLotCanceledReasonInternalServerError
const AdminCreateLotCanceledReasonInternalServerErrorCode int = 500

/*AdminCreateLotCanceledReasonInternalServerError Internal Server Error

swagger:response adminCreateLotCanceledReasonInternalServerError
*/
type AdminCreateLotCanceledReasonInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminCreateLotCanceledReasonInternalServerError creates AdminCreateLotCanceledReasonInternalServerError with default headers values
func NewAdminCreateLotCanceledReasonInternalServerError() *AdminCreateLotCanceledReasonInternalServerError {

	return &AdminCreateLotCanceledReasonInternalServerError{}
}

// WithPayload adds the payload to the admin create lot canceled reason internal server error response
func (o *AdminCreateLotCanceledReasonInternalServerError) WithPayload(payload *models.Error) *AdminCreateLotCanceledReasonInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin create lot canceled reason internal server error response
func (o *AdminCreateLotCanceledReasonInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminCreateLotCanceledReasonInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
