// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminCreateTopicOKCode is the HTTP code returned for type AdminCreateTopicOK
const AdminCreateTopicOKCode int = 200

/*AdminCreateTopicOK OK

swagger:response adminCreateTopicOK
*/
type AdminCreateTopicOK struct {

	/*
	  In: Body
	*/
	Payload *models.AdminTopic `json:"body,omitempty"`
}

// NewAdminCreateTopicOK creates AdminCreateTopicOK with default headers values
func NewAdminCreateTopicOK() *AdminCreateTopicOK {

	return &AdminCreateTopicOK{}
}

// WithPayload adds the payload to the admin create topic o k response
func (o *AdminCreateTopicOK) WithPayload(payload *models.AdminTopic) *AdminCreateTopicOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin create topic o k response
func (o *AdminCreateTopicOK) SetPayload(payload *models.AdminTopic) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminCreateTopicOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminCreateTopicBadRequestCode is the HTTP code returned for type AdminCreateTopicBadRequest
const AdminCreateTopicBadRequestCode int = 400

/*AdminCreateTopicBadRequest Bad Request

swagger:response adminCreateTopicBadRequest
*/
type AdminCreateTopicBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminCreateTopicBadRequest creates AdminCreateTopicBadRequest with default headers values
func NewAdminCreateTopicBadRequest() *AdminCreateTopicBadRequest {

	return &AdminCreateTopicBadRequest{}
}

// WithPayload adds the payload to the admin create topic bad request response
func (o *AdminCreateTopicBadRequest) WithPayload(payload *models.Error) *AdminCreateTopicBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin create topic bad request response
func (o *AdminCreateTopicBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminCreateTopicBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminCreateTopicInternalServerErrorCode is the HTTP code returned for type AdminCreateTopicInternalServerError
const AdminCreateTopicInternalServerErrorCode int = 500

/*AdminCreateTopicInternalServerError Internal Server Error

swagger:response adminCreateTopicInternalServerError
*/
type AdminCreateTopicInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminCreateTopicInternalServerError creates AdminCreateTopicInternalServerError with default headers values
func NewAdminCreateTopicInternalServerError() *AdminCreateTopicInternalServerError {

	return &AdminCreateTopicInternalServerError{}
}

// WithPayload adds the payload to the admin create topic internal server error response
func (o *AdminCreateTopicInternalServerError) WithPayload(payload *models.Error) *AdminCreateTopicInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin create topic internal server error response
func (o *AdminCreateTopicInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminCreateTopicInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
