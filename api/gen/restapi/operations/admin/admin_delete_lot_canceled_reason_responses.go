// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminDeleteLotCanceledReasonNoContentCode is the HTTP code returned for type AdminDeleteLotCanceledReasonNoContent
const AdminDeleteLotCanceledReasonNoContentCode int = 204

/*AdminDeleteLotCanceledReasonNoContent No content

swagger:response adminDeleteLotCanceledReasonNoContent
*/
type AdminDeleteLotCanceledReasonNoContent struct {
}

// NewAdminDeleteLotCanceledReasonNoContent creates AdminDeleteLotCanceledReasonNoContent with default headers values
func NewAdminDeleteLotCanceledReasonNoContent() *AdminDeleteLotCanceledReasonNoContent {

	return &AdminDeleteLotCanceledReasonNoContent{}
}

// WriteResponse to the client
func (o *AdminDeleteLotCanceledReasonNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// AdminDeleteLotCanceledReasonBadRequestCode is the HTTP code returned for type AdminDeleteLotCanceledReasonBadRequest
const AdminDeleteLotCanceledReasonBadRequestCode int = 400

/*AdminDeleteLotCanceledReasonBadRequest Bad Request

swagger:response adminDeleteLotCanceledReasonBadRequest
*/
type AdminDeleteLotCanceledReasonBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminDeleteLotCanceledReasonBadRequest creates AdminDeleteLotCanceledReasonBadRequest with default headers values
func NewAdminDeleteLotCanceledReasonBadRequest() *AdminDeleteLotCanceledReasonBadRequest {

	return &AdminDeleteLotCanceledReasonBadRequest{}
}

// WithPayload adds the payload to the admin delete lot canceled reason bad request response
func (o *AdminDeleteLotCanceledReasonBadRequest) WithPayload(payload *models.Error) *AdminDeleteLotCanceledReasonBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin delete lot canceled reason bad request response
func (o *AdminDeleteLotCanceledReasonBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminDeleteLotCanceledReasonBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminDeleteLotCanceledReasonInternalServerErrorCode is the HTTP code returned for type AdminDeleteLotCanceledReasonInternalServerError
const AdminDeleteLotCanceledReasonInternalServerErrorCode int = 500

/*AdminDeleteLotCanceledReasonInternalServerError Internal Server Error

swagger:response adminDeleteLotCanceledReasonInternalServerError
*/
type AdminDeleteLotCanceledReasonInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminDeleteLotCanceledReasonInternalServerError creates AdminDeleteLotCanceledReasonInternalServerError with default headers values
func NewAdminDeleteLotCanceledReasonInternalServerError() *AdminDeleteLotCanceledReasonInternalServerError {

	return &AdminDeleteLotCanceledReasonInternalServerError{}
}

// WithPayload adds the payload to the admin delete lot canceled reason internal server error response
func (o *AdminDeleteLotCanceledReasonInternalServerError) WithPayload(payload *models.Error) *AdminDeleteLotCanceledReasonInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin delete lot canceled reason internal server error response
func (o *AdminDeleteLotCanceledReasonInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminDeleteLotCanceledReasonInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
