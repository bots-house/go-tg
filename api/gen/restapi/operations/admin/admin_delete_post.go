// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// AdminDeletePostHandlerFunc turns a function with the right signature into a admin delete post handler
type AdminDeletePostHandlerFunc func(AdminDeletePostParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn AdminDeletePostHandlerFunc) Handle(params AdminDeletePostParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// AdminDeletePostHandler interface for that can handle valid admin delete post params
type AdminDeletePostHandler interface {
	Handle(AdminDeletePostParams, *authz.Identity) middleware.Responder
}

// NewAdminDeletePost creates a new http.Handler for the admin delete post operation
func NewAdminDeletePost(ctx *middleware.Context, handler AdminDeletePostHandler) *AdminDeletePost {
	return &AdminDeletePost{Context: ctx, Handler: handler}
}

/*AdminDeletePost swagger:route DELETE /admin/posts/{id} admin adminDeletePost

Delete Post

Удалить пост.

*/
type AdminDeletePost struct {
	Context *middleware.Context
	Handler AdminDeletePostHandler
}

func (o *AdminDeletePost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAdminDeletePostParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
