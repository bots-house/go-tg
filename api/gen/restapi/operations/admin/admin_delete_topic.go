// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// AdminDeleteTopicHandlerFunc turns a function with the right signature into a admin delete topic handler
type AdminDeleteTopicHandlerFunc func(AdminDeleteTopicParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn AdminDeleteTopicHandlerFunc) Handle(params AdminDeleteTopicParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// AdminDeleteTopicHandler interface for that can handle valid admin delete topic params
type AdminDeleteTopicHandler interface {
	Handle(AdminDeleteTopicParams, *authz.Identity) middleware.Responder
}

// NewAdminDeleteTopic creates a new http.Handler for the admin delete topic operation
func NewAdminDeleteTopic(ctx *middleware.Context, handler AdminDeleteTopicHandler) *AdminDeleteTopic {
	return &AdminDeleteTopic{Context: ctx, Handler: handler}
}

/*AdminDeleteTopic swagger:route DELETE /admin/settings/topics/{id} admin adminDeleteTopic

Delete Topic

Удаление категории.

*/
type AdminDeleteTopic struct {
	Context *middleware.Context
	Handler AdminDeleteTopicHandler
}

func (o *AdminDeleteTopic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAdminDeleteTopicParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
