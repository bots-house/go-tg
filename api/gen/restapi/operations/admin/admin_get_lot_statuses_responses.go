// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminGetLotStatusesOKCode is the HTTP code returned for type AdminGetLotStatusesOK
const AdminGetLotStatusesOKCode int = 200

/*AdminGetLotStatusesOK OK

swagger:response adminGetLotStatusesOK
*/
type AdminGetLotStatusesOK struct {

	/*
	  In: Body
	*/
	Payload *models.LotStatusesCount `json:"body,omitempty"`
}

// NewAdminGetLotStatusesOK creates AdminGetLotStatusesOK with default headers values
func NewAdminGetLotStatusesOK() *AdminGetLotStatusesOK {

	return &AdminGetLotStatusesOK{}
}

// WithPayload adds the payload to the admin get lot statuses o k response
func (o *AdminGetLotStatusesOK) WithPayload(payload *models.LotStatusesCount) *AdminGetLotStatusesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin get lot statuses o k response
func (o *AdminGetLotStatusesOK) SetPayload(payload *models.LotStatusesCount) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminGetLotStatusesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminGetLotStatusesBadRequestCode is the HTTP code returned for type AdminGetLotStatusesBadRequest
const AdminGetLotStatusesBadRequestCode int = 400

/*AdminGetLotStatusesBadRequest Bad Request

swagger:response adminGetLotStatusesBadRequest
*/
type AdminGetLotStatusesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminGetLotStatusesBadRequest creates AdminGetLotStatusesBadRequest with default headers values
func NewAdminGetLotStatusesBadRequest() *AdminGetLotStatusesBadRequest {

	return &AdminGetLotStatusesBadRequest{}
}

// WithPayload adds the payload to the admin get lot statuses bad request response
func (o *AdminGetLotStatusesBadRequest) WithPayload(payload *models.Error) *AdminGetLotStatusesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin get lot statuses bad request response
func (o *AdminGetLotStatusesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminGetLotStatusesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminGetLotStatusesInternalServerErrorCode is the HTTP code returned for type AdminGetLotStatusesInternalServerError
const AdminGetLotStatusesInternalServerErrorCode int = 500

/*AdminGetLotStatusesInternalServerError Internal Server Error

swagger:response adminGetLotStatusesInternalServerError
*/
type AdminGetLotStatusesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminGetLotStatusesInternalServerError creates AdminGetLotStatusesInternalServerError with default headers values
func NewAdminGetLotStatusesInternalServerError() *AdminGetLotStatusesInternalServerError {

	return &AdminGetLotStatusesInternalServerError{}
}

// WithPayload adds the payload to the admin get lot statuses internal server error response
func (o *AdminGetLotStatusesInternalServerError) WithPayload(payload *models.Error) *AdminGetLotStatusesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin get lot statuses internal server error response
func (o *AdminGetLotStatusesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminGetLotStatusesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
