// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminGetSettingsOKCode is the HTTP code returned for type AdminGetSettingsOK
const AdminGetSettingsOKCode int = 200

/*AdminGetSettingsOK OK

swagger:response adminGetSettingsOK
*/
type AdminGetSettingsOK struct {

	/*
	  In: Body
	*/
	Payload *models.AdminSettings `json:"body,omitempty"`
}

// NewAdminGetSettingsOK creates AdminGetSettingsOK with default headers values
func NewAdminGetSettingsOK() *AdminGetSettingsOK {

	return &AdminGetSettingsOK{}
}

// WithPayload adds the payload to the admin get settings o k response
func (o *AdminGetSettingsOK) WithPayload(payload *models.AdminSettings) *AdminGetSettingsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin get settings o k response
func (o *AdminGetSettingsOK) SetPayload(payload *models.AdminSettings) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminGetSettingsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminGetSettingsBadRequestCode is the HTTP code returned for type AdminGetSettingsBadRequest
const AdminGetSettingsBadRequestCode int = 400

/*AdminGetSettingsBadRequest Bad Request

swagger:response adminGetSettingsBadRequest
*/
type AdminGetSettingsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminGetSettingsBadRequest creates AdminGetSettingsBadRequest with default headers values
func NewAdminGetSettingsBadRequest() *AdminGetSettingsBadRequest {

	return &AdminGetSettingsBadRequest{}
}

// WithPayload adds the payload to the admin get settings bad request response
func (o *AdminGetSettingsBadRequest) WithPayload(payload *models.Error) *AdminGetSettingsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin get settings bad request response
func (o *AdminGetSettingsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminGetSettingsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminGetSettingsInternalServerErrorCode is the HTTP code returned for type AdminGetSettingsInternalServerError
const AdminGetSettingsInternalServerErrorCode int = 500

/*AdminGetSettingsInternalServerError Internal Server Error

swagger:response adminGetSettingsInternalServerError
*/
type AdminGetSettingsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminGetSettingsInternalServerError creates AdminGetSettingsInternalServerError with default headers values
func NewAdminGetSettingsInternalServerError() *AdminGetSettingsInternalServerError {

	return &AdminGetSettingsInternalServerError{}
}

// WithPayload adds the payload to the admin get settings internal server error response
func (o *AdminGetSettingsInternalServerError) WithPayload(payload *models.Error) *AdminGetSettingsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin get settings internal server error response
func (o *AdminGetSettingsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminGetSettingsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
