// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminRefreshLotOKCode is the HTTP code returned for type AdminRefreshLotOK
const AdminRefreshLotOKCode int = 200

/*AdminRefreshLotOK OK

swagger:response adminRefreshLotOK
*/
type AdminRefreshLotOK struct {

	/*
	  In: Body
	*/
	Payload *models.AdminFullLot `json:"body,omitempty"`
}

// NewAdminRefreshLotOK creates AdminRefreshLotOK with default headers values
func NewAdminRefreshLotOK() *AdminRefreshLotOK {

	return &AdminRefreshLotOK{}
}

// WithPayload adds the payload to the admin refresh lot o k response
func (o *AdminRefreshLotOK) WithPayload(payload *models.AdminFullLot) *AdminRefreshLotOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin refresh lot o k response
func (o *AdminRefreshLotOK) SetPayload(payload *models.AdminFullLot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminRefreshLotOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminRefreshLotBadRequestCode is the HTTP code returned for type AdminRefreshLotBadRequest
const AdminRefreshLotBadRequestCode int = 400

/*AdminRefreshLotBadRequest Bad Request

swagger:response adminRefreshLotBadRequest
*/
type AdminRefreshLotBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminRefreshLotBadRequest creates AdminRefreshLotBadRequest with default headers values
func NewAdminRefreshLotBadRequest() *AdminRefreshLotBadRequest {

	return &AdminRefreshLotBadRequest{}
}

// WithPayload adds the payload to the admin refresh lot bad request response
func (o *AdminRefreshLotBadRequest) WithPayload(payload *models.Error) *AdminRefreshLotBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin refresh lot bad request response
func (o *AdminRefreshLotBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminRefreshLotBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminRefreshLotInternalServerErrorCode is the HTTP code returned for type AdminRefreshLotInternalServerError
const AdminRefreshLotInternalServerErrorCode int = 500

/*AdminRefreshLotInternalServerError Internal Server Error

swagger:response adminRefreshLotInternalServerError
*/
type AdminRefreshLotInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminRefreshLotInternalServerError creates AdminRefreshLotInternalServerError with default headers values
func NewAdminRefreshLotInternalServerError() *AdminRefreshLotInternalServerError {

	return &AdminRefreshLotInternalServerError{}
}

// WithPayload adds the payload to the admin refresh lot internal server error response
func (o *AdminRefreshLotInternalServerError) WithPayload(payload *models.Error) *AdminRefreshLotInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin refresh lot internal server error response
func (o *AdminRefreshLotInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminRefreshLotInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
