// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// AdminUpdateCouponHandlerFunc turns a function with the right signature into a admin update coupon handler
type AdminUpdateCouponHandlerFunc func(AdminUpdateCouponParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn AdminUpdateCouponHandlerFunc) Handle(params AdminUpdateCouponParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// AdminUpdateCouponHandler interface for that can handle valid admin update coupon params
type AdminUpdateCouponHandler interface {
	Handle(AdminUpdateCouponParams, *authz.Identity) middleware.Responder
}

// NewAdminUpdateCoupon creates a new http.Handler for the admin update coupon operation
func NewAdminUpdateCoupon(ctx *middleware.Context, handler AdminUpdateCouponHandler) *AdminUpdateCoupon {
	return &AdminUpdateCoupon{Context: ctx, Handler: handler}
}

/*AdminUpdateCoupon swagger:route PUT /admin/coupons/{id} admin adminUpdateCoupon

Update Coupon

Обновление купона.

Возможные ошибки:
  - `coupon_with_this_code_already_exist` - Купон с таким кодом уже существует;
  - `coupon_discount_must_be_greater_than_zero` - Скидка купона должна быть выше 0;



*/
type AdminUpdateCoupon struct {
	Context *middleware.Context
	Handler AdminUpdateCouponHandler
}

func (o *AdminUpdateCoupon) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAdminUpdateCouponParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
