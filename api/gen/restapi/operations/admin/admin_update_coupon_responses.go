// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminUpdateCouponOKCode is the HTTP code returned for type AdminUpdateCouponOK
const AdminUpdateCouponOKCode int = 200

/*AdminUpdateCouponOK OK

swagger:response adminUpdateCouponOK
*/
type AdminUpdateCouponOK struct {

	/*
	  In: Body
	*/
	Payload *models.CouponItem `json:"body,omitempty"`
}

// NewAdminUpdateCouponOK creates AdminUpdateCouponOK with default headers values
func NewAdminUpdateCouponOK() *AdminUpdateCouponOK {

	return &AdminUpdateCouponOK{}
}

// WithPayload adds the payload to the admin update coupon o k response
func (o *AdminUpdateCouponOK) WithPayload(payload *models.CouponItem) *AdminUpdateCouponOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update coupon o k response
func (o *AdminUpdateCouponOK) SetPayload(payload *models.CouponItem) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateCouponOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateCouponBadRequestCode is the HTTP code returned for type AdminUpdateCouponBadRequest
const AdminUpdateCouponBadRequestCode int = 400

/*AdminUpdateCouponBadRequest Bad Request

swagger:response adminUpdateCouponBadRequest
*/
type AdminUpdateCouponBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateCouponBadRequest creates AdminUpdateCouponBadRequest with default headers values
func NewAdminUpdateCouponBadRequest() *AdminUpdateCouponBadRequest {

	return &AdminUpdateCouponBadRequest{}
}

// WithPayload adds the payload to the admin update coupon bad request response
func (o *AdminUpdateCouponBadRequest) WithPayload(payload *models.Error) *AdminUpdateCouponBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update coupon bad request response
func (o *AdminUpdateCouponBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateCouponBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateCouponInternalServerErrorCode is the HTTP code returned for type AdminUpdateCouponInternalServerError
const AdminUpdateCouponInternalServerErrorCode int = 500

/*AdminUpdateCouponInternalServerError Internal Server Error

swagger:response adminUpdateCouponInternalServerError
*/
type AdminUpdateCouponInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateCouponInternalServerError creates AdminUpdateCouponInternalServerError with default headers values
func NewAdminUpdateCouponInternalServerError() *AdminUpdateCouponInternalServerError {

	return &AdminUpdateCouponInternalServerError{}
}

// WithPayload adds the payload to the admin update coupon internal server error response
func (o *AdminUpdateCouponInternalServerError) WithPayload(payload *models.Error) *AdminUpdateCouponInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update coupon internal server error response
func (o *AdminUpdateCouponInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateCouponInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
