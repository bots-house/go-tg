// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// AdminUpdateLotCanceledReasonHandlerFunc turns a function with the right signature into a admin update lot canceled reason handler
type AdminUpdateLotCanceledReasonHandlerFunc func(AdminUpdateLotCanceledReasonParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn AdminUpdateLotCanceledReasonHandlerFunc) Handle(params AdminUpdateLotCanceledReasonParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// AdminUpdateLotCanceledReasonHandler interface for that can handle valid admin update lot canceled reason params
type AdminUpdateLotCanceledReasonHandler interface {
	Handle(AdminUpdateLotCanceledReasonParams, *authz.Identity) middleware.Responder
}

// NewAdminUpdateLotCanceledReason creates a new http.Handler for the admin update lot canceled reason operation
func NewAdminUpdateLotCanceledReason(ctx *middleware.Context, handler AdminUpdateLotCanceledReasonHandler) *AdminUpdateLotCanceledReason {
	return &AdminUpdateLotCanceledReason{Context: ctx, Handler: handler}
}

/*AdminUpdateLotCanceledReason swagger:route PUT /admin/settings/lot-canceled-reason/{id} admin adminUpdateLotCanceledReason

Update Lot Canceled Reason

Обновление причины отмены лота.

*/
type AdminUpdateLotCanceledReason struct {
	Context *middleware.Context
	Handler AdminUpdateLotCanceledReasonHandler
}

func (o *AdminUpdateLotCanceledReason) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAdminUpdateLotCanceledReasonParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
