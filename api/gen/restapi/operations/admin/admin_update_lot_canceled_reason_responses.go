// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminUpdateLotCanceledReasonOKCode is the HTTP code returned for type AdminUpdateLotCanceledReasonOK
const AdminUpdateLotCanceledReasonOKCode int = 200

/*AdminUpdateLotCanceledReasonOK OK

swagger:response adminUpdateLotCanceledReasonOK
*/
type AdminUpdateLotCanceledReasonOK struct {

	/*
	  In: Body
	*/
	Payload *models.LotCanceledReason `json:"body,omitempty"`
}

// NewAdminUpdateLotCanceledReasonOK creates AdminUpdateLotCanceledReasonOK with default headers values
func NewAdminUpdateLotCanceledReasonOK() *AdminUpdateLotCanceledReasonOK {

	return &AdminUpdateLotCanceledReasonOK{}
}

// WithPayload adds the payload to the admin update lot canceled reason o k response
func (o *AdminUpdateLotCanceledReasonOK) WithPayload(payload *models.LotCanceledReason) *AdminUpdateLotCanceledReasonOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update lot canceled reason o k response
func (o *AdminUpdateLotCanceledReasonOK) SetPayload(payload *models.LotCanceledReason) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateLotCanceledReasonOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateLotCanceledReasonBadRequestCode is the HTTP code returned for type AdminUpdateLotCanceledReasonBadRequest
const AdminUpdateLotCanceledReasonBadRequestCode int = 400

/*AdminUpdateLotCanceledReasonBadRequest Bad Request

swagger:response adminUpdateLotCanceledReasonBadRequest
*/
type AdminUpdateLotCanceledReasonBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateLotCanceledReasonBadRequest creates AdminUpdateLotCanceledReasonBadRequest with default headers values
func NewAdminUpdateLotCanceledReasonBadRequest() *AdminUpdateLotCanceledReasonBadRequest {

	return &AdminUpdateLotCanceledReasonBadRequest{}
}

// WithPayload adds the payload to the admin update lot canceled reason bad request response
func (o *AdminUpdateLotCanceledReasonBadRequest) WithPayload(payload *models.Error) *AdminUpdateLotCanceledReasonBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update lot canceled reason bad request response
func (o *AdminUpdateLotCanceledReasonBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateLotCanceledReasonBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateLotCanceledReasonInternalServerErrorCode is the HTTP code returned for type AdminUpdateLotCanceledReasonInternalServerError
const AdminUpdateLotCanceledReasonInternalServerErrorCode int = 500

/*AdminUpdateLotCanceledReasonInternalServerError Internal Server Error

swagger:response adminUpdateLotCanceledReasonInternalServerError
*/
type AdminUpdateLotCanceledReasonInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateLotCanceledReasonInternalServerError creates AdminUpdateLotCanceledReasonInternalServerError with default headers values
func NewAdminUpdateLotCanceledReasonInternalServerError() *AdminUpdateLotCanceledReasonInternalServerError {

	return &AdminUpdateLotCanceledReasonInternalServerError{}
}

// WithPayload adds the payload to the admin update lot canceled reason internal server error response
func (o *AdminUpdateLotCanceledReasonInternalServerError) WithPayload(payload *models.Error) *AdminUpdateLotCanceledReasonInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update lot canceled reason internal server error response
func (o *AdminUpdateLotCanceledReasonInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateLotCanceledReasonInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
