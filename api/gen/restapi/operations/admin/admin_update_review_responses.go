// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminUpdateReviewOKCode is the HTTP code returned for type AdminUpdateReviewOK
const AdminUpdateReviewOKCode int = 200

/*AdminUpdateReviewOK OK

swagger:response adminUpdateReviewOK
*/
type AdminUpdateReviewOK struct {

	/*
	  In: Body
	*/
	Payload *models.Review `json:"body,omitempty"`
}

// NewAdminUpdateReviewOK creates AdminUpdateReviewOK with default headers values
func NewAdminUpdateReviewOK() *AdminUpdateReviewOK {

	return &AdminUpdateReviewOK{}
}

// WithPayload adds the payload to the admin update review o k response
func (o *AdminUpdateReviewOK) WithPayload(payload *models.Review) *AdminUpdateReviewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update review o k response
func (o *AdminUpdateReviewOK) SetPayload(payload *models.Review) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateReviewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateReviewBadRequestCode is the HTTP code returned for type AdminUpdateReviewBadRequest
const AdminUpdateReviewBadRequestCode int = 400

/*AdminUpdateReviewBadRequest Bad Request

swagger:response adminUpdateReviewBadRequest
*/
type AdminUpdateReviewBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateReviewBadRequest creates AdminUpdateReviewBadRequest with default headers values
func NewAdminUpdateReviewBadRequest() *AdminUpdateReviewBadRequest {

	return &AdminUpdateReviewBadRequest{}
}

// WithPayload adds the payload to the admin update review bad request response
func (o *AdminUpdateReviewBadRequest) WithPayload(payload *models.Error) *AdminUpdateReviewBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update review bad request response
func (o *AdminUpdateReviewBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateReviewBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateReviewInternalServerErrorCode is the HTTP code returned for type AdminUpdateReviewInternalServerError
const AdminUpdateReviewInternalServerErrorCode int = 500

/*AdminUpdateReviewInternalServerError Internal Server Error

swagger:response adminUpdateReviewInternalServerError
*/
type AdminUpdateReviewInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateReviewInternalServerError creates AdminUpdateReviewInternalServerError with default headers values
func NewAdminUpdateReviewInternalServerError() *AdminUpdateReviewInternalServerError {

	return &AdminUpdateReviewInternalServerError{}
}

// WithPayload adds the payload to the admin update review internal server error response
func (o *AdminUpdateReviewInternalServerError) WithPayload(payload *models.Error) *AdminUpdateReviewInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update review internal server error response
func (o *AdminUpdateReviewInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateReviewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
