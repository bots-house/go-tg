// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// AdminUpdateSettingsOKCode is the HTTP code returned for type AdminUpdateSettingsOK
const AdminUpdateSettingsOKCode int = 200

/*AdminUpdateSettingsOK OK

swagger:response adminUpdateSettingsOK
*/
type AdminUpdateSettingsOK struct {

	/*
	  In: Body
	*/
	Payload *models.AdminSettings `json:"body,omitempty"`
}

// NewAdminUpdateSettingsOK creates AdminUpdateSettingsOK with default headers values
func NewAdminUpdateSettingsOK() *AdminUpdateSettingsOK {

	return &AdminUpdateSettingsOK{}
}

// WithPayload adds the payload to the admin update settings o k response
func (o *AdminUpdateSettingsOK) WithPayload(payload *models.AdminSettings) *AdminUpdateSettingsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update settings o k response
func (o *AdminUpdateSettingsOK) SetPayload(payload *models.AdminSettings) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateSettingsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateSettingsBadRequestCode is the HTTP code returned for type AdminUpdateSettingsBadRequest
const AdminUpdateSettingsBadRequestCode int = 400

/*AdminUpdateSettingsBadRequest Bad Request

swagger:response adminUpdateSettingsBadRequest
*/
type AdminUpdateSettingsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateSettingsBadRequest creates AdminUpdateSettingsBadRequest with default headers values
func NewAdminUpdateSettingsBadRequest() *AdminUpdateSettingsBadRequest {

	return &AdminUpdateSettingsBadRequest{}
}

// WithPayload adds the payload to the admin update settings bad request response
func (o *AdminUpdateSettingsBadRequest) WithPayload(payload *models.Error) *AdminUpdateSettingsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update settings bad request response
func (o *AdminUpdateSettingsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateSettingsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AdminUpdateSettingsInternalServerErrorCode is the HTTP code returned for type AdminUpdateSettingsInternalServerError
const AdminUpdateSettingsInternalServerErrorCode int = 500

/*AdminUpdateSettingsInternalServerError Internal Server Error

swagger:response adminUpdateSettingsInternalServerError
*/
type AdminUpdateSettingsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAdminUpdateSettingsInternalServerError creates AdminUpdateSettingsInternalServerError with default headers values
func NewAdminUpdateSettingsInternalServerError() *AdminUpdateSettingsInternalServerError {

	return &AdminUpdateSettingsInternalServerError{}
}

// WithPayload adds the payload to the admin update settings internal server error response
func (o *AdminUpdateSettingsInternalServerError) WithPayload(payload *models.Error) *AdminUpdateSettingsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the admin update settings internal server error response
func (o *AdminUpdateSettingsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AdminUpdateSettingsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
