// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// AdminUpdateTopicHandlerFunc turns a function with the right signature into a admin update topic handler
type AdminUpdateTopicHandlerFunc func(AdminUpdateTopicParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn AdminUpdateTopicHandlerFunc) Handle(params AdminUpdateTopicParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// AdminUpdateTopicHandler interface for that can handle valid admin update topic params
type AdminUpdateTopicHandler interface {
	Handle(AdminUpdateTopicParams, *authz.Identity) middleware.Responder
}

// NewAdminUpdateTopic creates a new http.Handler for the admin update topic operation
func NewAdminUpdateTopic(ctx *middleware.Context, handler AdminUpdateTopicHandler) *AdminUpdateTopic {
	return &AdminUpdateTopic{Context: ctx, Handler: handler}
}

/*AdminUpdateTopic swagger:route PUT /admin/settings/topics/{id} admin adminUpdateTopic

Update Topic

Обновление категории.

*/
type AdminUpdateTopic struct {
	Context *middleware.Context
	Handler AdminUpdateTopicHandler
}

func (o *AdminUpdateTopic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAdminUpdateTopicParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
