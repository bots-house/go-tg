// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// ToggleUserAdminHandlerFunc turns a function with the right signature into a toggle user admin handler
type ToggleUserAdminHandlerFunc func(ToggleUserAdminParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn ToggleUserAdminHandlerFunc) Handle(params ToggleUserAdminParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// ToggleUserAdminHandler interface for that can handle valid toggle user admin params
type ToggleUserAdminHandler interface {
	Handle(ToggleUserAdminParams, *authz.Identity) middleware.Responder
}

// NewToggleUserAdmin creates a new http.Handler for the toggle user admin operation
func NewToggleUserAdmin(ctx *middleware.Context, handler ToggleUserAdminHandler) *ToggleUserAdmin {
	return &ToggleUserAdmin{Context: ctx, Handler: handler}
}

/*ToggleUserAdmin swagger:route POST /admin/users/{id}/admin admin toggleUserAdmin

Change Admin Rights

Изменение админ прав пользователя.

*/
type ToggleUserAdmin struct {
	Context *middleware.Context
	Handler ToggleUserAdminHandler
}

func (o *ToggleUserAdmin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewToggleUserAdminParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
