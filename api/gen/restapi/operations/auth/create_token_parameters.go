// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/bots-house/birzzha/api/gen/models"
)

// NewCreateTokenParams creates a new CreateTokenParams object
// no default values defined in spec.
func NewCreateTokenParams() CreateTokenParams {

	return CreateTokenParams{}
}

// CreateTokenParams contains all the bound params for the create token operation
// typically these are obtained from a http.Request
//
// swagger:parameters createToken
type CreateTokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Уникальный ID запроса. Используется для трейсинга.
	  In: header
	*/
	XRequestID *strfmt.UUID
	/*
	  In: body
	*/
	Payload *models.InputAuth
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateTokenParams() beforehand.
func (o *CreateTokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.InputAuth
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("payload", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Payload = &body
			}
		}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *CreateTokenParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("X-Request-Id", "header", "strfmt.UUID", raw)
	}
	o.XRequestID = (value.(*strfmt.UUID))

	if err := o.validateXRequestID(formats); err != nil {
		return err
	}

	return nil
}

// validateXRequestID carries on validations for parameter XRequestID
func (o *CreateTokenParams) validateXRequestID(formats strfmt.Registry) error {

	if err := validate.FormatOf("X-Request-Id", "header", "uuid", o.XRequestID.String(), formats); err != nil {
		return err
	}
	return nil
}
