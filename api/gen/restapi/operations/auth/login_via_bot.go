// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LoginViaBotHandlerFunc turns a function with the right signature into a login via bot handler
type LoginViaBotHandlerFunc func(LoginViaBotParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LoginViaBotHandlerFunc) Handle(params LoginViaBotParams) middleware.Responder {
	return fn(params)
}

// LoginViaBotHandler interface for that can handle valid login via bot params
type LoginViaBotHandler interface {
	Handle(LoginViaBotParams) middleware.Responder
}

// NewLoginViaBot creates a new http.Handler for the login via bot operation
func NewLoginViaBot(ctx *middleware.Context, handler LoginViaBotHandler) *LoginViaBot {
	return &LoginViaBot{Context: ctx, Handler: handler}
}

/*LoginViaBot swagger:route GET /auth/bot auth loginViaBot

Login via Bot

При переходе по этой ссылке пользователь будет перенаправлен в Telegram. Telegram бот перенаправит его на `callback_url` вместе с данными [LoginUrl](https://core.telegram.org/bots/api/#loginurl).

*/
type LoginViaBot struct {
	Context *middleware.Context
	Handler LoginViaBotHandler
}

func (o *LoginViaBot) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLoginViaBotParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
