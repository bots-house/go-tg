// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewLoginViaBotParams creates a new LoginViaBotParams object
// no default values defined in spec.
func NewLoginViaBotParams() LoginViaBotParams {

	return LoginViaBotParams{}
}

// LoginViaBotParams contains all the bound params for the login via bot operation
// typically these are obtained from a http.Request
//
// swagger:parameters loginViaBot
type LoginViaBotParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Уникальный ID запроса. Используется для трейсинга.
	  In: header
	*/
	XRequestID *strfmt.UUID
	/*URL для возврата
	  Required: true
	  In: query
	*/
	CallbackURL string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewLoginViaBotParams() beforehand.
func (o *LoginViaBotParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qCallbackURL, qhkCallbackURL, _ := qs.GetOK("callback_url")
	if err := o.bindCallbackURL(qCallbackURL, qhkCallbackURL, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *LoginViaBotParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("X-Request-Id", "header", "strfmt.UUID", raw)
	}
	o.XRequestID = (value.(*strfmt.UUID))

	if err := o.validateXRequestID(formats); err != nil {
		return err
	}

	return nil
}

// validateXRequestID carries on validations for parameter XRequestID
func (o *LoginViaBotParams) validateXRequestID(formats strfmt.Registry) error {

	if err := validate.FormatOf("X-Request-Id", "header", "uuid", o.XRequestID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindCallbackURL binds and validates parameter CallbackURL from query.
func (o *LoginViaBotParams) bindCallbackURL(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("callback_url", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("callback_url", "query", raw); err != nil {
		return err
	}

	o.CallbackURL = raw

	return nil
}
