// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/bots-house/birzzha/api/authz"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/admin"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/auth"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/bot"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/catalog"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/health"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/landing"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/personal_area"
	"github.com/bots-house/birzzha/api/gen/restapi/operations/webhook"
)

// NewBirzzhaAPI creates a new Birzzha instance
func NewBirzzhaAPI(spec *loads.Document) *BirzzhaAPI {
	return &BirzzhaAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		UrlformConsumer:       runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		AdminAdminCreateLotCanceledReasonHandler: admin.AdminCreateLotCanceledReasonHandlerFunc(func(params admin.AdminCreateLotCanceledReasonParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminCreateLotCanceledReason has not yet been implemented")
		}),
		AdminAdminCreatePostHandler: admin.AdminCreatePostHandlerFunc(func(params admin.AdminCreatePostParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminCreatePost has not yet been implemented")
		}),
		AdminAdminCreateTopicHandler: admin.AdminCreateTopicHandlerFunc(func(params admin.AdminCreateTopicParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminCreateTopic has not yet been implemented")
		}),
		AdminAdminDeclineLotHandler: admin.AdminDeclineLotHandlerFunc(func(params admin.AdminDeclineLotParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminDeclineLot has not yet been implemented")
		}),
		AdminAdminDeleteLotCanceledReasonHandler: admin.AdminDeleteLotCanceledReasonHandlerFunc(func(params admin.AdminDeleteLotCanceledReasonParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminDeleteLotCanceledReason has not yet been implemented")
		}),
		AdminAdminDeleteReviewHandler: admin.AdminDeleteReviewHandlerFunc(func(params admin.AdminDeleteReviewParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminDeleteReview has not yet been implemented")
		}),
		AdminAdminDeleteTopicHandler: admin.AdminDeleteTopicHandlerFunc(func(params admin.AdminDeleteTopicParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminDeleteTopic has not yet been implemented")
		}),
		AdminAdminGetLotHandler: admin.AdminGetLotHandlerFunc(func(params admin.AdminGetLotParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminGetLot has not yet been implemented")
		}),
		AdminAdminGetLotStatusesHandler: admin.AdminGetLotStatusesHandlerFunc(func(params admin.AdminGetLotStatusesParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminGetLotStatuses has not yet been implemented")
		}),
		AdminAdminGetLotsHandler: admin.AdminGetLotsHandlerFunc(func(params admin.AdminGetLotsParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminGetLots has not yet been implemented")
		}),
		AdminAdminGetPostTextHandler: admin.AdminGetPostTextHandlerFunc(func(params admin.AdminGetPostTextParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminGetPostText has not yet been implemented")
		}),
		AdminAdminGetReviewsHandler: admin.AdminGetReviewsHandlerFunc(func(params admin.AdminGetReviewsParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminGetReviews has not yet been implemented")
		}),
		AdminAdminGetSettingsHandler: admin.AdminGetSettingsHandlerFunc(func(params admin.AdminGetSettingsParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminGetSettings has not yet been implemented")
		}),
		AdminAdminGetUsersHandler: admin.AdminGetUsersHandlerFunc(func(params admin.AdminGetUsersParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminGetUsers has not yet been implemented")
		}),
		AdminAdminSendPostPreviewHandler: admin.AdminSendPostPreviewHandlerFunc(func(params admin.AdminSendPostPreviewParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminSendPostPreview has not yet been implemented")
		}),
		AdminAdminUpdateLotHandler: admin.AdminUpdateLotHandlerFunc(func(params admin.AdminUpdateLotParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminUpdateLot has not yet been implemented")
		}),
		AdminAdminUpdateLotCanceledReasonHandler: admin.AdminUpdateLotCanceledReasonHandlerFunc(func(params admin.AdminUpdateLotCanceledReasonParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminUpdateLotCanceledReason has not yet been implemented")
		}),
		AdminAdminUpdateReviewHandler: admin.AdminUpdateReviewHandlerFunc(func(params admin.AdminUpdateReviewParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminUpdateReview has not yet been implemented")
		}),
		AdminAdminUpdateSettingsChannelHandler: admin.AdminUpdateSettingsChannelHandlerFunc(func(params admin.AdminUpdateSettingsChannelParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminUpdateSettingsChannel has not yet been implemented")
		}),
		AdminAdminUpdateSettingsLandingHandler: admin.AdminUpdateSettingsLandingHandlerFunc(func(params admin.AdminUpdateSettingsLandingParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminUpdateSettingsLanding has not yet been implemented")
		}),
		AdminAdminUpdateSettingsPricesHandler: admin.AdminUpdateSettingsPricesHandlerFunc(func(params admin.AdminUpdateSettingsPricesParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminUpdateSettingsPrices has not yet been implemented")
		}),
		AdminAdminUpdateTopicHandler: admin.AdminUpdateTopicHandlerFunc(func(params admin.AdminUpdateTopicParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.AdminUpdateTopic has not yet been implemented")
		}),
		PersonalAreaCancelLotHandler: personal_area.CancelLotHandlerFunc(func(params personal_area.CancelLotParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.CancelLot has not yet been implemented")
		}),
		PersonalAreaChangeLotPriceHandler: personal_area.ChangeLotPriceHandlerFunc(func(params personal_area.ChangeLotPriceParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.ChangeLotPrice has not yet been implemented")
		}),
		PersonalAreaCreateApplicationPaymentHandler: personal_area.CreateApplicationPaymentHandlerFunc(func(params personal_area.CreateApplicationPaymentParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.CreateApplicationPayment has not yet been implemented")
		}),
		PersonalAreaCreateChangePricePaymentHandler: personal_area.CreateChangePricePaymentHandlerFunc(func(params personal_area.CreateChangePricePaymentParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.CreateChangePricePayment has not yet been implemented")
		}),
		PersonalAreaCreateLotHandler: personal_area.CreateLotHandlerFunc(func(params personal_area.CreateLotParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.CreateLot has not yet been implemented")
		}),
		AuthCreateTokenHandler: auth.CreateTokenHandlerFunc(func(params auth.CreateTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.CreateToken has not yet been implemented")
		}),
		PersonalAreaGetApplicationInoviceHandler: personal_area.GetApplicationInoviceHandlerFunc(func(params personal_area.GetApplicationInoviceParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.GetApplicationInovice has not yet been implemented")
		}),
		BotGetBotInfoHandler: bot.GetBotInfoHandlerFunc(func(params bot.GetBotInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation bot.GetBotInfo has not yet been implemented")
		}),
		PersonalAreaGetChangePriceInvoiceHandler: personal_area.GetChangePriceInvoiceHandlerFunc(func(params personal_area.GetChangePriceInvoiceParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.GetChangePriceInvoice has not yet been implemented")
		}),
		CatalogGetDailyCoverageHandler: catalog.GetDailyCoverageHandlerFunc(func(params catalog.GetDailyCoverageParams) middleware.Responder {
			return middleware.NotImplemented("operation catalog.GetDailyCoverage has not yet been implemented")
		}),
		PersonalAreaGetFavoriteLotsHandler: personal_area.GetFavoriteLotsHandlerFunc(func(params personal_area.GetFavoriteLotsParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.GetFavoriteLots has not yet been implemented")
		}),
		CatalogGetFilterBoundariesHandler: catalog.GetFilterBoundariesHandlerFunc(func(params catalog.GetFilterBoundariesParams) middleware.Responder {
			return middleware.NotImplemented("operation catalog.GetFilterBoundaries has not yet been implemented")
		}),
		HealthGetHealthHandler: health.GetHealthHandlerFunc(func(params health.GetHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation health.GetHealth has not yet been implemented")
		}),
		LandingGetLandingHandler: landing.GetLandingHandlerFunc(func(params landing.GetLandingParams) middleware.Responder {
			return middleware.NotImplemented("operation landing.GetLanding has not yet been implemented")
		}),
		CatalogGetLotHandler: catalog.GetLotHandlerFunc(func(params catalog.GetLotParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation catalog.GetLot has not yet been implemented")
		}),
		PersonalAreaGetLotCanceledReasonsHandler: personal_area.GetLotCanceledReasonsHandlerFunc(func(params personal_area.GetLotCanceledReasonsParams) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.GetLotCanceledReasons has not yet been implemented")
		}),
		CatalogGetLotsHandler: catalog.GetLotsHandlerFunc(func(params catalog.GetLotsParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation catalog.GetLots has not yet been implemented")
		}),
		PersonalAreaGetPaymentStatusHandler: personal_area.GetPaymentStatusHandlerFunc(func(params personal_area.GetPaymentStatusParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.GetPaymentStatus has not yet been implemented")
		}),
		LandingGetReviewsHandler: landing.GetReviewsHandlerFunc(func(params landing.GetReviewsParams) middleware.Responder {
			return middleware.NotImplemented("operation landing.GetReviews has not yet been implemented")
		}),
		CatalogGetSimilarLotsHandler: catalog.GetSimilarLotsHandlerFunc(func(params catalog.GetSimilarLotsParams) middleware.Responder {
			return middleware.NotImplemented("operation catalog.GetSimilarLots has not yet been implemented")
		}),
		CatalogGetTopicsHandler: catalog.GetTopicsHandlerFunc(func(params catalog.GetTopicsParams) middleware.Responder {
			return middleware.NotImplemented("operation catalog.GetTopics has not yet been implemented")
		}),
		AuthGetUserHandler: auth.GetUserHandlerFunc(func(params auth.GetUserParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation auth.GetUser has not yet been implemented")
		}),
		PersonalAreaGetUserLotsHandler: personal_area.GetUserLotsHandlerFunc(func(params personal_area.GetUserLotsParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.GetUserLots has not yet been implemented")
		}),
		WebhookHandleGatewayNotificationHandler: webhook.HandleGatewayNotificationHandlerFunc(func(params webhook.HandleGatewayNotificationParams) middleware.Responder {
			return middleware.NotImplemented("operation webhook.HandleGatewayNotification has not yet been implemented")
		}),
		BotHandleUpdateHandler: bot.HandleUpdateHandlerFunc(func(params bot.HandleUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation bot.HandleUpdate has not yet been implemented")
		}),
		AuthLoginViaBotHandler: auth.LoginViaBotHandlerFunc(func(params auth.LoginViaBotParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.LoginViaBot has not yet been implemented")
		}),
		CatalogResolveTelegramHandler: catalog.ResolveTelegramHandlerFunc(func(params catalog.ResolveTelegramParams) middleware.Responder {
			return middleware.NotImplemented("operation catalog.ResolveTelegram has not yet been implemented")
		}),
		CatalogToggleLotFavoriteHandler: catalog.ToggleLotFavoriteHandlerFunc(func(params catalog.ToggleLotFavoriteParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation catalog.ToggleLotFavorite has not yet been implemented")
		}),
		AdminToggleUserAdminHandler: admin.ToggleUserAdminHandlerFunc(func(params admin.ToggleUserAdminParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation admin.ToggleUserAdmin has not yet been implemented")
		}),
		PersonalAreaUploadLotFileHandler: personal_area.UploadLotFileHandlerFunc(func(params personal_area.UploadLotFileParams, principal *authz.Identity) middleware.Responder {
			return middleware.NotImplemented("operation personal_area.UploadLotFile has not yet been implemented")
		}),

		// Applies when the "X-Token" header is set
		TokenHeaderAuth: func(token string) (*authz.Identity, error) {
			return nil, errors.NotImplemented("api key auth (TokenHeader) X-Token from header param [X-Token] has not yet been implemented")
		},
		// Applies when the "token" query is set
		TokenQueryAuth: func(token string) (*authz.Identity, error) {
			return nil, errors.NotImplemented("api key auth (TokenQuery) token from query param [token] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*BirzzhaAPI the birzzha API */
type BirzzhaAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// TokenHeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-Token provided in the header
	TokenHeaderAuth func(string) (*authz.Identity, error)

	// TokenQueryAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key token provided in the query
	TokenQueryAuth func(string) (*authz.Identity, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AdminAdminCreateLotCanceledReasonHandler sets the operation handler for the admin create lot canceled reason operation
	AdminAdminCreateLotCanceledReasonHandler admin.AdminCreateLotCanceledReasonHandler
	// AdminAdminCreatePostHandler sets the operation handler for the admin create post operation
	AdminAdminCreatePostHandler admin.AdminCreatePostHandler
	// AdminAdminCreateTopicHandler sets the operation handler for the admin create topic operation
	AdminAdminCreateTopicHandler admin.AdminCreateTopicHandler
	// AdminAdminDeclineLotHandler sets the operation handler for the admin decline lot operation
	AdminAdminDeclineLotHandler admin.AdminDeclineLotHandler
	// AdminAdminDeleteLotCanceledReasonHandler sets the operation handler for the admin delete lot canceled reason operation
	AdminAdminDeleteLotCanceledReasonHandler admin.AdminDeleteLotCanceledReasonHandler
	// AdminAdminDeleteReviewHandler sets the operation handler for the admin delete review operation
	AdminAdminDeleteReviewHandler admin.AdminDeleteReviewHandler
	// AdminAdminDeleteTopicHandler sets the operation handler for the admin delete topic operation
	AdminAdminDeleteTopicHandler admin.AdminDeleteTopicHandler
	// AdminAdminGetLotHandler sets the operation handler for the admin get lot operation
	AdminAdminGetLotHandler admin.AdminGetLotHandler
	// AdminAdminGetLotStatusesHandler sets the operation handler for the admin get lot statuses operation
	AdminAdminGetLotStatusesHandler admin.AdminGetLotStatusesHandler
	// AdminAdminGetLotsHandler sets the operation handler for the admin get lots operation
	AdminAdminGetLotsHandler admin.AdminGetLotsHandler
	// AdminAdminGetPostTextHandler sets the operation handler for the admin get post text operation
	AdminAdminGetPostTextHandler admin.AdminGetPostTextHandler
	// AdminAdminGetReviewsHandler sets the operation handler for the admin get reviews operation
	AdminAdminGetReviewsHandler admin.AdminGetReviewsHandler
	// AdminAdminGetSettingsHandler sets the operation handler for the admin get settings operation
	AdminAdminGetSettingsHandler admin.AdminGetSettingsHandler
	// AdminAdminGetUsersHandler sets the operation handler for the admin get users operation
	AdminAdminGetUsersHandler admin.AdminGetUsersHandler
	// AdminAdminSendPostPreviewHandler sets the operation handler for the admin send post preview operation
	AdminAdminSendPostPreviewHandler admin.AdminSendPostPreviewHandler
	// AdminAdminUpdateLotHandler sets the operation handler for the admin update lot operation
	AdminAdminUpdateLotHandler admin.AdminUpdateLotHandler
	// AdminAdminUpdateLotCanceledReasonHandler sets the operation handler for the admin update lot canceled reason operation
	AdminAdminUpdateLotCanceledReasonHandler admin.AdminUpdateLotCanceledReasonHandler
	// AdminAdminUpdateReviewHandler sets the operation handler for the admin update review operation
	AdminAdminUpdateReviewHandler admin.AdminUpdateReviewHandler
	// AdminAdminUpdateSettingsChannelHandler sets the operation handler for the admin update settings channel operation
	AdminAdminUpdateSettingsChannelHandler admin.AdminUpdateSettingsChannelHandler
	// AdminAdminUpdateSettingsLandingHandler sets the operation handler for the admin update settings landing operation
	AdminAdminUpdateSettingsLandingHandler admin.AdminUpdateSettingsLandingHandler
	// AdminAdminUpdateSettingsPricesHandler sets the operation handler for the admin update settings prices operation
	AdminAdminUpdateSettingsPricesHandler admin.AdminUpdateSettingsPricesHandler
	// AdminAdminUpdateTopicHandler sets the operation handler for the admin update topic operation
	AdminAdminUpdateTopicHandler admin.AdminUpdateTopicHandler
	// PersonalAreaCancelLotHandler sets the operation handler for the cancel lot operation
	PersonalAreaCancelLotHandler personal_area.CancelLotHandler
	// PersonalAreaChangeLotPriceHandler sets the operation handler for the change lot price operation
	PersonalAreaChangeLotPriceHandler personal_area.ChangeLotPriceHandler
	// PersonalAreaCreateApplicationPaymentHandler sets the operation handler for the create application payment operation
	PersonalAreaCreateApplicationPaymentHandler personal_area.CreateApplicationPaymentHandler
	// PersonalAreaCreateChangePricePaymentHandler sets the operation handler for the create change price payment operation
	PersonalAreaCreateChangePricePaymentHandler personal_area.CreateChangePricePaymentHandler
	// PersonalAreaCreateLotHandler sets the operation handler for the create lot operation
	PersonalAreaCreateLotHandler personal_area.CreateLotHandler
	// AuthCreateTokenHandler sets the operation handler for the create token operation
	AuthCreateTokenHandler auth.CreateTokenHandler
	// PersonalAreaGetApplicationInoviceHandler sets the operation handler for the get application inovice operation
	PersonalAreaGetApplicationInoviceHandler personal_area.GetApplicationInoviceHandler
	// BotGetBotInfoHandler sets the operation handler for the get bot info operation
	BotGetBotInfoHandler bot.GetBotInfoHandler
	// PersonalAreaGetChangePriceInvoiceHandler sets the operation handler for the get change price invoice operation
	PersonalAreaGetChangePriceInvoiceHandler personal_area.GetChangePriceInvoiceHandler
	// CatalogGetDailyCoverageHandler sets the operation handler for the get daily coverage operation
	CatalogGetDailyCoverageHandler catalog.GetDailyCoverageHandler
	// PersonalAreaGetFavoriteLotsHandler sets the operation handler for the get favorite lots operation
	PersonalAreaGetFavoriteLotsHandler personal_area.GetFavoriteLotsHandler
	// CatalogGetFilterBoundariesHandler sets the operation handler for the get filter boundaries operation
	CatalogGetFilterBoundariesHandler catalog.GetFilterBoundariesHandler
	// HealthGetHealthHandler sets the operation handler for the get health operation
	HealthGetHealthHandler health.GetHealthHandler
	// LandingGetLandingHandler sets the operation handler for the get landing operation
	LandingGetLandingHandler landing.GetLandingHandler
	// CatalogGetLotHandler sets the operation handler for the get lot operation
	CatalogGetLotHandler catalog.GetLotHandler
	// PersonalAreaGetLotCanceledReasonsHandler sets the operation handler for the get lot canceled reasons operation
	PersonalAreaGetLotCanceledReasonsHandler personal_area.GetLotCanceledReasonsHandler
	// CatalogGetLotsHandler sets the operation handler for the get lots operation
	CatalogGetLotsHandler catalog.GetLotsHandler
	// PersonalAreaGetPaymentStatusHandler sets the operation handler for the get payment status operation
	PersonalAreaGetPaymentStatusHandler personal_area.GetPaymentStatusHandler
	// LandingGetReviewsHandler sets the operation handler for the get reviews operation
	LandingGetReviewsHandler landing.GetReviewsHandler
	// CatalogGetSimilarLotsHandler sets the operation handler for the get similar lots operation
	CatalogGetSimilarLotsHandler catalog.GetSimilarLotsHandler
	// CatalogGetTopicsHandler sets the operation handler for the get topics operation
	CatalogGetTopicsHandler catalog.GetTopicsHandler
	// AuthGetUserHandler sets the operation handler for the get user operation
	AuthGetUserHandler auth.GetUserHandler
	// PersonalAreaGetUserLotsHandler sets the operation handler for the get user lots operation
	PersonalAreaGetUserLotsHandler personal_area.GetUserLotsHandler
	// WebhookHandleGatewayNotificationHandler sets the operation handler for the handle gateway notification operation
	WebhookHandleGatewayNotificationHandler webhook.HandleGatewayNotificationHandler
	// BotHandleUpdateHandler sets the operation handler for the handle update operation
	BotHandleUpdateHandler bot.HandleUpdateHandler
	// AuthLoginViaBotHandler sets the operation handler for the login via bot operation
	AuthLoginViaBotHandler auth.LoginViaBotHandler
	// CatalogResolveTelegramHandler sets the operation handler for the resolve telegram operation
	CatalogResolveTelegramHandler catalog.ResolveTelegramHandler
	// CatalogToggleLotFavoriteHandler sets the operation handler for the toggle lot favorite operation
	CatalogToggleLotFavoriteHandler catalog.ToggleLotFavoriteHandler
	// AdminToggleUserAdminHandler sets the operation handler for the toggle user admin operation
	AdminToggleUserAdminHandler admin.ToggleUserAdminHandler
	// PersonalAreaUploadLotFileHandler sets the operation handler for the upload lot file operation
	PersonalAreaUploadLotFileHandler personal_area.UploadLotFileHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *BirzzhaAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *BirzzhaAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *BirzzhaAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *BirzzhaAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *BirzzhaAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *BirzzhaAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *BirzzhaAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the BirzzhaAPI
func (o *BirzzhaAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}
	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TokenHeaderAuth == nil {
		unregistered = append(unregistered, "XTokenAuth")
	}
	if o.TokenQueryAuth == nil {
		unregistered = append(unregistered, "TokenAuth")
	}

	if o.AdminAdminCreateLotCanceledReasonHandler == nil {
		unregistered = append(unregistered, "admin.AdminCreateLotCanceledReasonHandler")
	}
	if o.AdminAdminCreatePostHandler == nil {
		unregistered = append(unregistered, "admin.AdminCreatePostHandler")
	}
	if o.AdminAdminCreateTopicHandler == nil {
		unregistered = append(unregistered, "admin.AdminCreateTopicHandler")
	}
	if o.AdminAdminDeclineLotHandler == nil {
		unregistered = append(unregistered, "admin.AdminDeclineLotHandler")
	}
	if o.AdminAdminDeleteLotCanceledReasonHandler == nil {
		unregistered = append(unregistered, "admin.AdminDeleteLotCanceledReasonHandler")
	}
	if o.AdminAdminDeleteReviewHandler == nil {
		unregistered = append(unregistered, "admin.AdminDeleteReviewHandler")
	}
	if o.AdminAdminDeleteTopicHandler == nil {
		unregistered = append(unregistered, "admin.AdminDeleteTopicHandler")
	}
	if o.AdminAdminGetLotHandler == nil {
		unregistered = append(unregistered, "admin.AdminGetLotHandler")
	}
	if o.AdminAdminGetLotStatusesHandler == nil {
		unregistered = append(unregistered, "admin.AdminGetLotStatusesHandler")
	}
	if o.AdminAdminGetLotsHandler == nil {
		unregistered = append(unregistered, "admin.AdminGetLotsHandler")
	}
	if o.AdminAdminGetPostTextHandler == nil {
		unregistered = append(unregistered, "admin.AdminGetPostTextHandler")
	}
	if o.AdminAdminGetReviewsHandler == nil {
		unregistered = append(unregistered, "admin.AdminGetReviewsHandler")
	}
	if o.AdminAdminGetSettingsHandler == nil {
		unregistered = append(unregistered, "admin.AdminGetSettingsHandler")
	}
	if o.AdminAdminGetUsersHandler == nil {
		unregistered = append(unregistered, "admin.AdminGetUsersHandler")
	}
	if o.AdminAdminSendPostPreviewHandler == nil {
		unregistered = append(unregistered, "admin.AdminSendPostPreviewHandler")
	}
	if o.AdminAdminUpdateLotHandler == nil {
		unregistered = append(unregistered, "admin.AdminUpdateLotHandler")
	}
	if o.AdminAdminUpdateLotCanceledReasonHandler == nil {
		unregistered = append(unregistered, "admin.AdminUpdateLotCanceledReasonHandler")
	}
	if o.AdminAdminUpdateReviewHandler == nil {
		unregistered = append(unregistered, "admin.AdminUpdateReviewHandler")
	}
	if o.AdminAdminUpdateSettingsChannelHandler == nil {
		unregistered = append(unregistered, "admin.AdminUpdateSettingsChannelHandler")
	}
	if o.AdminAdminUpdateSettingsLandingHandler == nil {
		unregistered = append(unregistered, "admin.AdminUpdateSettingsLandingHandler")
	}
	if o.AdminAdminUpdateSettingsPricesHandler == nil {
		unregistered = append(unregistered, "admin.AdminUpdateSettingsPricesHandler")
	}
	if o.AdminAdminUpdateTopicHandler == nil {
		unregistered = append(unregistered, "admin.AdminUpdateTopicHandler")
	}
	if o.PersonalAreaCancelLotHandler == nil {
		unregistered = append(unregistered, "personal_area.CancelLotHandler")
	}
	if o.PersonalAreaChangeLotPriceHandler == nil {
		unregistered = append(unregistered, "personal_area.ChangeLotPriceHandler")
	}
	if o.PersonalAreaCreateApplicationPaymentHandler == nil {
		unregistered = append(unregistered, "personal_area.CreateApplicationPaymentHandler")
	}
	if o.PersonalAreaCreateChangePricePaymentHandler == nil {
		unregistered = append(unregistered, "personal_area.CreateChangePricePaymentHandler")
	}
	if o.PersonalAreaCreateLotHandler == nil {
		unregistered = append(unregistered, "personal_area.CreateLotHandler")
	}
	if o.AuthCreateTokenHandler == nil {
		unregistered = append(unregistered, "auth.CreateTokenHandler")
	}
	if o.PersonalAreaGetApplicationInoviceHandler == nil {
		unregistered = append(unregistered, "personal_area.GetApplicationInoviceHandler")
	}
	if o.BotGetBotInfoHandler == nil {
		unregistered = append(unregistered, "bot.GetBotInfoHandler")
	}
	if o.PersonalAreaGetChangePriceInvoiceHandler == nil {
		unregistered = append(unregistered, "personal_area.GetChangePriceInvoiceHandler")
	}
	if o.CatalogGetDailyCoverageHandler == nil {
		unregistered = append(unregistered, "catalog.GetDailyCoverageHandler")
	}
	if o.PersonalAreaGetFavoriteLotsHandler == nil {
		unregistered = append(unregistered, "personal_area.GetFavoriteLotsHandler")
	}
	if o.CatalogGetFilterBoundariesHandler == nil {
		unregistered = append(unregistered, "catalog.GetFilterBoundariesHandler")
	}
	if o.HealthGetHealthHandler == nil {
		unregistered = append(unregistered, "health.GetHealthHandler")
	}
	if o.LandingGetLandingHandler == nil {
		unregistered = append(unregistered, "landing.GetLandingHandler")
	}
	if o.CatalogGetLotHandler == nil {
		unregistered = append(unregistered, "catalog.GetLotHandler")
	}
	if o.PersonalAreaGetLotCanceledReasonsHandler == nil {
		unregistered = append(unregistered, "personal_area.GetLotCanceledReasonsHandler")
	}
	if o.CatalogGetLotsHandler == nil {
		unregistered = append(unregistered, "catalog.GetLotsHandler")
	}
	if o.PersonalAreaGetPaymentStatusHandler == nil {
		unregistered = append(unregistered, "personal_area.GetPaymentStatusHandler")
	}
	if o.LandingGetReviewsHandler == nil {
		unregistered = append(unregistered, "landing.GetReviewsHandler")
	}
	if o.CatalogGetSimilarLotsHandler == nil {
		unregistered = append(unregistered, "catalog.GetSimilarLotsHandler")
	}
	if o.CatalogGetTopicsHandler == nil {
		unregistered = append(unregistered, "catalog.GetTopicsHandler")
	}
	if o.AuthGetUserHandler == nil {
		unregistered = append(unregistered, "auth.GetUserHandler")
	}
	if o.PersonalAreaGetUserLotsHandler == nil {
		unregistered = append(unregistered, "personal_area.GetUserLotsHandler")
	}
	if o.WebhookHandleGatewayNotificationHandler == nil {
		unregistered = append(unregistered, "webhook.HandleGatewayNotificationHandler")
	}
	if o.BotHandleUpdateHandler == nil {
		unregistered = append(unregistered, "bot.HandleUpdateHandler")
	}
	if o.AuthLoginViaBotHandler == nil {
		unregistered = append(unregistered, "auth.LoginViaBotHandler")
	}
	if o.CatalogResolveTelegramHandler == nil {
		unregistered = append(unregistered, "catalog.ResolveTelegramHandler")
	}
	if o.CatalogToggleLotFavoriteHandler == nil {
		unregistered = append(unregistered, "catalog.ToggleLotFavoriteHandler")
	}
	if o.AdminToggleUserAdminHandler == nil {
		unregistered = append(unregistered, "admin.ToggleUserAdminHandler")
	}
	if o.PersonalAreaUploadLotFileHandler == nil {
		unregistered = append(unregistered, "personal_area.UploadLotFileHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *BirzzhaAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *BirzzhaAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "TokenHeader":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.TokenHeaderAuth(token)
			})

		case "TokenQuery":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.TokenQueryAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *BirzzhaAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *BirzzhaAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *BirzzhaAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *BirzzhaAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the birzzha API
func (o *BirzzhaAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *BirzzhaAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/settings/lot-canceled-reasons"] = admin.NewAdminCreateLotCanceledReason(o.context, o.AdminAdminCreateLotCanceledReasonHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/posts"] = admin.NewAdminCreatePost(o.context, o.AdminAdminCreatePostHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/settings/topics"] = admin.NewAdminCreateTopic(o.context, o.AdminAdminCreateTopicHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/lots/{id}/decline"] = admin.NewAdminDeclineLot(o.context, o.AdminAdminDeclineLotHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/admin/settings/lot-canceled-reason/{id}"] = admin.NewAdminDeleteLotCanceledReason(o.context, o.AdminAdminDeleteLotCanceledReasonHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/admin/reviews/{id}"] = admin.NewAdminDeleteReview(o.context, o.AdminAdminDeleteReviewHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/admin/settings/topics/{id}"] = admin.NewAdminDeleteTopic(o.context, o.AdminAdminDeleteTopicHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/lots/{id}"] = admin.NewAdminGetLot(o.context, o.AdminAdminGetLotHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/lot/statuses"] = admin.NewAdminGetLotStatuses(o.context, o.AdminAdminGetLotStatusesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/lots"] = admin.NewAdminGetLots(o.context, o.AdminAdminGetLotsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/lots/{id}/text"] = admin.NewAdminGetPostText(o.context, o.AdminAdminGetPostTextHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/reviews"] = admin.NewAdminGetReviews(o.context, o.AdminAdminGetReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/settings"] = admin.NewAdminGetSettings(o.context, o.AdminAdminGetSettingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/users"] = admin.NewAdminGetUsers(o.context, o.AdminAdminGetUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/posting/preview"] = admin.NewAdminSendPostPreview(o.context, o.AdminAdminSendPostPreviewHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/lots/{id}"] = admin.NewAdminUpdateLot(o.context, o.AdminAdminUpdateLotHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/settings/lot-canceled-reason/{id}"] = admin.NewAdminUpdateLotCanceledReason(o.context, o.AdminAdminUpdateLotCanceledReasonHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/reviews/{id}"] = admin.NewAdminUpdateReview(o.context, o.AdminAdminUpdateReviewHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/settings/channel"] = admin.NewAdminUpdateSettingsChannel(o.context, o.AdminAdminUpdateSettingsChannelHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/settings/landing"] = admin.NewAdminUpdateSettingsLanding(o.context, o.AdminAdminUpdateSettingsLandingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/settings/prices"] = admin.NewAdminUpdateSettingsPrices(o.context, o.AdminAdminUpdateSettingsPricesHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/settings/topics/{id}"] = admin.NewAdminUpdateTopic(o.context, o.AdminAdminUpdateTopicHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/lots/{id}/cancel"] = personal_area.NewCancelLot(o.context, o.PersonalAreaCancelLotHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/lots/{id}/change-price"] = personal_area.NewChangeLotPrice(o.context, o.PersonalAreaChangeLotPriceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lots/{id}/application-payment"] = personal_area.NewCreateApplicationPayment(o.context, o.PersonalAreaCreateApplicationPaymentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lots/{id}/change-price-payment"] = personal_area.NewCreateChangePricePayment(o.context, o.PersonalAreaCreateChangePricePaymentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/lots"] = personal_area.NewCreateLot(o.context, o.PersonalAreaCreateLotHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth"] = auth.NewCreateToken(o.context, o.AuthCreateTokenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lots/{id}/application-invoice"] = personal_area.NewGetApplicationInovice(o.context, o.PersonalAreaGetApplicationInoviceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bot"] = bot.NewGetBotInfo(o.context, o.BotGetBotInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lots/{id}/change-price-invoice"] = personal_area.NewGetChangePriceInvoice(o.context, o.PersonalAreaGetChangePriceInvoiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tg/daily-coverage"] = catalog.NewGetDailyCoverage(o.context, o.CatalogGetDailyCoverageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/favorites"] = personal_area.NewGetFavoriteLots(o.context, o.PersonalAreaGetFavoriteLotsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lots/filter-boundaries"] = catalog.NewGetFilterBoundaries(o.context, o.CatalogGetFilterBoundariesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health"] = health.NewGetHealth(o.context, o.HealthGetHealthHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/landing"] = landing.NewGetLanding(o.context, o.LandingGetLandingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lots/{id}"] = catalog.NewGetLot(o.context, o.CatalogGetLotHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lot-canceled-reasons"] = personal_area.NewGetLotCanceledReasons(o.context, o.PersonalAreaGetLotCanceledReasonsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lots"] = catalog.NewGetLots(o.context, o.CatalogGetLotsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/payments/{id}/status"] = personal_area.NewGetPaymentStatus(o.context, o.PersonalAreaGetPaymentStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/reviews"] = landing.NewGetReviews(o.context, o.LandingGetReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lots/{id}/similars"] = catalog.NewGetSimilarLots(o.context, o.CatalogGetSimilarLotsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topics"] = catalog.NewGetTopics(o.context, o.CatalogGetTopicsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = auth.NewGetUser(o.context, o.AuthGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/lots"] = personal_area.NewGetUserLots(o.context, o.PersonalAreaGetUserLotsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/webhooks/gateways/{name}"] = webhook.NewHandleGatewayNotification(o.context, o.WebhookHandleGatewayNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/bot"] = bot.NewHandleUpdate(o.context, o.BotHandleUpdateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/bot"] = auth.NewLoginViaBot(o.context, o.AuthLoginViaBotHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tg/resolve"] = catalog.NewResolveTelegram(o.context, o.CatalogResolveTelegramHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lots/{id}/favorite"] = catalog.NewToggleLotFavorite(o.context, o.CatalogToggleLotFavoriteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/users/{id}/admin"] = admin.NewToggleUserAdmin(o.context, o.AdminToggleUserAdminHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lots/file"] = personal_area.NewUploadLotFile(o.context, o.PersonalAreaUploadLotFileHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *BirzzhaAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *BirzzhaAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *BirzzhaAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *BirzzhaAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *BirzzhaAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
