// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// GetDailyCoverageOKCode is the HTTP code returned for type GetDailyCoverageOK
const GetDailyCoverageOKCode int = 200

/*GetDailyCoverageOK OK

swagger:response getDailyCoverageOK
*/
type GetDailyCoverageOK struct {

	/*
	  In: Body
	*/
	Payload *models.DailyCoverage `json:"body,omitempty"`
}

// NewGetDailyCoverageOK creates GetDailyCoverageOK with default headers values
func NewGetDailyCoverageOK() *GetDailyCoverageOK {

	return &GetDailyCoverageOK{}
}

// WithPayload adds the payload to the get daily coverage o k response
func (o *GetDailyCoverageOK) WithPayload(payload *models.DailyCoverage) *GetDailyCoverageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get daily coverage o k response
func (o *GetDailyCoverageOK) SetPayload(payload *models.DailyCoverage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDailyCoverageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDailyCoverageBadRequestCode is the HTTP code returned for type GetDailyCoverageBadRequest
const GetDailyCoverageBadRequestCode int = 400

/*GetDailyCoverageBadRequest Bad Request

swagger:response getDailyCoverageBadRequest
*/
type GetDailyCoverageBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDailyCoverageBadRequest creates GetDailyCoverageBadRequest with default headers values
func NewGetDailyCoverageBadRequest() *GetDailyCoverageBadRequest {

	return &GetDailyCoverageBadRequest{}
}

// WithPayload adds the payload to the get daily coverage bad request response
func (o *GetDailyCoverageBadRequest) WithPayload(payload *models.Error) *GetDailyCoverageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get daily coverage bad request response
func (o *GetDailyCoverageBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDailyCoverageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDailyCoverageInternalServerErrorCode is the HTTP code returned for type GetDailyCoverageInternalServerError
const GetDailyCoverageInternalServerErrorCode int = 500

/*GetDailyCoverageInternalServerError Internal Server Error

swagger:response getDailyCoverageInternalServerError
*/
type GetDailyCoverageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDailyCoverageInternalServerError creates GetDailyCoverageInternalServerError with default headers values
func NewGetDailyCoverageInternalServerError() *GetDailyCoverageInternalServerError {

	return &GetDailyCoverageInternalServerError{}
}

// WithPayload adds the payload to the get daily coverage internal server error response
func (o *GetDailyCoverageInternalServerError) WithPayload(payload *models.Error) *GetDailyCoverageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get daily coverage internal server error response
func (o *GetDailyCoverageInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDailyCoverageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
