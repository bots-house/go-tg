// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFilterBoundariesParams creates a new GetFilterBoundariesParams object
// no default values defined in spec.
func NewGetFilterBoundariesParams() GetFilterBoundariesParams {

	return GetFilterBoundariesParams{}
}

// GetFilterBoundariesParams contains all the bound params for the get filter boundaries operation
// typically these are obtained from a http.Request
//
// swagger:parameters getFilterBoundaries
type GetFilterBoundariesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID категорий для фильтрации границ
	  In: query
	*/
	Topics []int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetFilterBoundariesParams() beforehand.
func (o *GetFilterBoundariesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qTopics, qhkTopics, _ := qs.GetOK("topics")
	if err := o.bindTopics(qTopics, qhkTopics, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindTopics binds and validates array parameter Topics from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetFilterBoundariesParams) bindTopics(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvTopics string
	if len(rawData) > 0 {
		qvTopics = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	topicsIC := swag.SplitByFormat(qvTopics, "")
	if len(topicsIC) == 0 {
		return nil
	}

	var topicsIR []int64
	for i, topicsIV := range topicsIC {
		topicsI, err := swag.ConvertInt64(topicsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "topics", i), "query", "int64", topicsI)
		}

		topicsIR = append(topicsIR, topicsI)
	}

	o.Topics = topicsIR

	return nil
}
