// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetLotHandlerFunc turns a function with the right signature into a get lot handler
type GetLotHandlerFunc func(GetLotParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLotHandlerFunc) Handle(params GetLotParams) middleware.Responder {
	return fn(params)
}

// GetLotHandler interface for that can handle valid get lot params
type GetLotHandler interface {
	Handle(GetLotParams) middleware.Responder
}

// NewGetLot creates a new http.Handler for the get lot operation
func NewGetLot(ctx *middleware.Context, handler GetLotHandler) *GetLot {
	return &GetLot{Context: ctx, Handler: handler}
}

/*GetLot swagger:route GET /lots/{id} catalog getLot

Get Lot

Получить лот.

*/
type GetLot struct {
	Context *middleware.Context
	Handler GetLotHandler
}

func (o *GetLot) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLotParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
