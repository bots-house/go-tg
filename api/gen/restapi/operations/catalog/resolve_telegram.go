// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ResolveTelegramHandlerFunc turns a function with the right signature into a resolve telegram handler
type ResolveTelegramHandlerFunc func(ResolveTelegramParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ResolveTelegramHandlerFunc) Handle(params ResolveTelegramParams) middleware.Responder {
	return fn(params)
}

// ResolveTelegramHandler interface for that can handle valid resolve telegram params
type ResolveTelegramHandler interface {
	Handle(ResolveTelegramParams) middleware.Responder
}

// NewResolveTelegram creates a new http.Handler for the resolve telegram operation
func NewResolveTelegram(ctx *middleware.Context, handler ResolveTelegramHandler) *ResolveTelegram {
	return &ResolveTelegram{Context: ctx, Handler: handler}
}

/*ResolveTelegram swagger:route GET /tg/resolve catalog resolveTelegram

Resolve Telegram Identity

Возвращает информацию о Telegram-сущности (каналы и чат) по @username или приватной ссылке.
Написание ссылки или @username **не важно** (есть протокол или нет, домен, @ в начала).

### Пример запросов

  - https://t.me/channely_updates
  - t.me/crosser_live
  - crosser_chat
  - @zzapusk

### Возможные ошибки

| Status | Code | Description |
|:---------|:--------------|:-----------------|
| 400 | `tg_invalid_query` | Недопустимый формат ввода |
| 400 | `tg_entity_not_found` | Сущность не найдена |
| 400 | `tg_entity_not_found_or_bot_is_not_admin` | Сущность не найдена либо бот не являеться админом канала |
| 500 | `internal_error` | Внутреняя ошибка сервера |


*/
type ResolveTelegram struct {
	Context *middleware.Context
	Handler ResolveTelegramHandler
}

func (o *ResolveTelegram) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewResolveTelegramParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
