// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// ResolveTelegramOKCode is the HTTP code returned for type ResolveTelegramOK
const ResolveTelegramOKCode int = 200

/*ResolveTelegramOK OK

swagger:response resolveTelegramOK
*/
type ResolveTelegramOK struct {

	/*
	  In: Body
	*/
	Payload *models.TelegramResolveResult `json:"body,omitempty"`
}

// NewResolveTelegramOK creates ResolveTelegramOK with default headers values
func NewResolveTelegramOK() *ResolveTelegramOK {

	return &ResolveTelegramOK{}
}

// WithPayload adds the payload to the resolve telegram o k response
func (o *ResolveTelegramOK) WithPayload(payload *models.TelegramResolveResult) *ResolveTelegramOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the resolve telegram o k response
func (o *ResolveTelegramOK) SetPayload(payload *models.TelegramResolveResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ResolveTelegramOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ResolveTelegramBadRequestCode is the HTTP code returned for type ResolveTelegramBadRequest
const ResolveTelegramBadRequestCode int = 400

/*ResolveTelegramBadRequest Bad Request

swagger:response resolveTelegramBadRequest
*/
type ResolveTelegramBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewResolveTelegramBadRequest creates ResolveTelegramBadRequest with default headers values
func NewResolveTelegramBadRequest() *ResolveTelegramBadRequest {

	return &ResolveTelegramBadRequest{}
}

// WithPayload adds the payload to the resolve telegram bad request response
func (o *ResolveTelegramBadRequest) WithPayload(payload *models.Error) *ResolveTelegramBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the resolve telegram bad request response
func (o *ResolveTelegramBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ResolveTelegramBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ResolveTelegramInternalServerErrorCode is the HTTP code returned for type ResolveTelegramInternalServerError
const ResolveTelegramInternalServerErrorCode int = 500

/*ResolveTelegramInternalServerError Internal Server Error

swagger:response resolveTelegramInternalServerError
*/
type ResolveTelegramInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewResolveTelegramInternalServerError creates ResolveTelegramInternalServerError with default headers values
func NewResolveTelegramInternalServerError() *ResolveTelegramInternalServerError {

	return &ResolveTelegramInternalServerError{}
}

// WithPayload adds the payload to the resolve telegram internal server error response
func (o *ResolveTelegramInternalServerError) WithPayload(payload *models.Error) *ResolveTelegramInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the resolve telegram internal server error response
func (o *ResolveTelegramInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ResolveTelegramInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
