// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// ToggleLotFavoriteOKCode is the HTTP code returned for type ToggleLotFavoriteOK
const ToggleLotFavoriteOKCode int = 200

/*ToggleLotFavoriteOK OK

swagger:response toggleLotFavoriteOK
*/
type ToggleLotFavoriteOK struct {

	/*
	  In: Body
	*/
	Payload *models.LotFavoriteStatus `json:"body,omitempty"`
}

// NewToggleLotFavoriteOK creates ToggleLotFavoriteOK with default headers values
func NewToggleLotFavoriteOK() *ToggleLotFavoriteOK {

	return &ToggleLotFavoriteOK{}
}

// WithPayload adds the payload to the toggle lot favorite o k response
func (o *ToggleLotFavoriteOK) WithPayload(payload *models.LotFavoriteStatus) *ToggleLotFavoriteOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the toggle lot favorite o k response
func (o *ToggleLotFavoriteOK) SetPayload(payload *models.LotFavoriteStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ToggleLotFavoriteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ToggleLotFavoriteBadRequestCode is the HTTP code returned for type ToggleLotFavoriteBadRequest
const ToggleLotFavoriteBadRequestCode int = 400

/*ToggleLotFavoriteBadRequest Bad Request

swagger:response toggleLotFavoriteBadRequest
*/
type ToggleLotFavoriteBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewToggleLotFavoriteBadRequest creates ToggleLotFavoriteBadRequest with default headers values
func NewToggleLotFavoriteBadRequest() *ToggleLotFavoriteBadRequest {

	return &ToggleLotFavoriteBadRequest{}
}

// WithPayload adds the payload to the toggle lot favorite bad request response
func (o *ToggleLotFavoriteBadRequest) WithPayload(payload *models.Error) *ToggleLotFavoriteBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the toggle lot favorite bad request response
func (o *ToggleLotFavoriteBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ToggleLotFavoriteBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ToggleLotFavoriteInternalServerErrorCode is the HTTP code returned for type ToggleLotFavoriteInternalServerError
const ToggleLotFavoriteInternalServerErrorCode int = 500

/*ToggleLotFavoriteInternalServerError Internal Server Error

swagger:response toggleLotFavoriteInternalServerError
*/
type ToggleLotFavoriteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewToggleLotFavoriteInternalServerError creates ToggleLotFavoriteInternalServerError with default headers values
func NewToggleLotFavoriteInternalServerError() *ToggleLotFavoriteInternalServerError {

	return &ToggleLotFavoriteInternalServerError{}
}

// WithPayload adds the payload to the toggle lot favorite internal server error response
func (o *ToggleLotFavoriteInternalServerError) WithPayload(payload *models.Error) *ToggleLotFavoriteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the toggle lot favorite internal server error response
func (o *ToggleLotFavoriteInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ToggleLotFavoriteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
