// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// ChangeLotIdentityHandlerFunc turns a function with the right signature into a change lot identity handler
type ChangeLotIdentityHandlerFunc func(ChangeLotIdentityParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn ChangeLotIdentityHandlerFunc) Handle(params ChangeLotIdentityParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// ChangeLotIdentityHandler interface for that can handle valid change lot identity params
type ChangeLotIdentityHandler interface {
	Handle(ChangeLotIdentityParams, *authz.Identity) middleware.Responder
}

// NewChangeLotIdentity creates a new http.Handler for the change lot identity operation
func NewChangeLotIdentity(ctx *middleware.Context, handler ChangeLotIdentityHandler) *ChangeLotIdentity {
	return &ChangeLotIdentity{Context: ctx, Handler: handler}
}

/*ChangeLotIdentity swagger:route PUT /user/lots/{id}/identity personal-area changeLotIdentity

Change Lot Identity

Обновить ссылку на канал.

Возможные ошибки:
  - `channel_id_must_be_same_as_previous_one` - id канала должен оставаться прежним.
  - `entity_must_be_channel` - Ресурс который доступен по новой ссылке должен быть каналом.


*/
type ChangeLotIdentity struct {
	Context *middleware.Context
	Handler ChangeLotIdentityHandler
}

func (o *ChangeLotIdentity) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewChangeLotIdentityParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
