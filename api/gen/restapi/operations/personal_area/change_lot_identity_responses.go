// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// ChangeLotIdentityOKCode is the HTTP code returned for type ChangeLotIdentityOK
const ChangeLotIdentityOKCode int = 200

/*ChangeLotIdentityOK OK

swagger:response changeLotIdentityOK
*/
type ChangeLotIdentityOK struct {

	/*
	  In: Body
	*/
	Payload *models.OwnedLot `json:"body,omitempty"`
}

// NewChangeLotIdentityOK creates ChangeLotIdentityOK with default headers values
func NewChangeLotIdentityOK() *ChangeLotIdentityOK {

	return &ChangeLotIdentityOK{}
}

// WithPayload adds the payload to the change lot identity o k response
func (o *ChangeLotIdentityOK) WithPayload(payload *models.OwnedLot) *ChangeLotIdentityOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the change lot identity o k response
func (o *ChangeLotIdentityOK) SetPayload(payload *models.OwnedLot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChangeLotIdentityOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ChangeLotIdentityBadRequestCode is the HTTP code returned for type ChangeLotIdentityBadRequest
const ChangeLotIdentityBadRequestCode int = 400

/*ChangeLotIdentityBadRequest Bad Request

swagger:response changeLotIdentityBadRequest
*/
type ChangeLotIdentityBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewChangeLotIdentityBadRequest creates ChangeLotIdentityBadRequest with default headers values
func NewChangeLotIdentityBadRequest() *ChangeLotIdentityBadRequest {

	return &ChangeLotIdentityBadRequest{}
}

// WithPayload adds the payload to the change lot identity bad request response
func (o *ChangeLotIdentityBadRequest) WithPayload(payload *models.Error) *ChangeLotIdentityBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the change lot identity bad request response
func (o *ChangeLotIdentityBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChangeLotIdentityBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ChangeLotIdentityInternalServerErrorCode is the HTTP code returned for type ChangeLotIdentityInternalServerError
const ChangeLotIdentityInternalServerErrorCode int = 500

/*ChangeLotIdentityInternalServerError Internal Server Error

swagger:response changeLotIdentityInternalServerError
*/
type ChangeLotIdentityInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewChangeLotIdentityInternalServerError creates ChangeLotIdentityInternalServerError with default headers values
func NewChangeLotIdentityInternalServerError() *ChangeLotIdentityInternalServerError {

	return &ChangeLotIdentityInternalServerError{}
}

// WithPayload adds the payload to the change lot identity internal server error response
func (o *ChangeLotIdentityInternalServerError) WithPayload(payload *models.Error) *ChangeLotIdentityInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the change lot identity internal server error response
func (o *ChangeLotIdentityInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChangeLotIdentityInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
