// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// CreateApplicationPaymentHandlerFunc turns a function with the right signature into a create application payment handler
type CreateApplicationPaymentHandlerFunc func(CreateApplicationPaymentParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateApplicationPaymentHandlerFunc) Handle(params CreateApplicationPaymentParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// CreateApplicationPaymentHandler interface for that can handle valid create application payment params
type CreateApplicationPaymentHandler interface {
	Handle(CreateApplicationPaymentParams, *authz.Identity) middleware.Responder
}

// NewCreateApplicationPayment creates a new http.Handler for the create application payment operation
func NewCreateApplicationPayment(ctx *middleware.Context, handler CreateApplicationPaymentHandler) *CreateApplicationPayment {
	return &CreateApplicationPayment{Context: ctx, Handler: handler}
}

/*CreateApplicationPayment swagger:route POST /lots/{id}/application-payment personal-area createApplicationPayment

Create Application Payment

Создает платеж и возвращает данные формы с помощью которой пользователя нужно отправить на платежную систему.


*/
type CreateApplicationPayment struct {
	Context *middleware.Context
	Handler CreateApplicationPaymentHandler
}

func (o *CreateApplicationPayment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateApplicationPaymentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
