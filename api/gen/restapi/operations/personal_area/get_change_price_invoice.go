// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// GetChangePriceInvoiceHandlerFunc turns a function with the right signature into a get change price invoice handler
type GetChangePriceInvoiceHandlerFunc func(GetChangePriceInvoiceParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChangePriceInvoiceHandlerFunc) Handle(params GetChangePriceInvoiceParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// GetChangePriceInvoiceHandler interface for that can handle valid get change price invoice params
type GetChangePriceInvoiceHandler interface {
	Handle(GetChangePriceInvoiceParams, *authz.Identity) middleware.Responder
}

// NewGetChangePriceInvoice creates a new http.Handler for the get change price invoice operation
func NewGetChangePriceInvoice(ctx *middleware.Context, handler GetChangePriceInvoiceHandler) *GetChangePriceInvoice {
	return &GetChangePriceInvoice{Context: ctx, Handler: handler}
}

/*GetChangePriceInvoice swagger:route GET /lots/{id}/change-price-invoice personal-area getChangePriceInvoice

Get Change Price Invoice

Получить информацию для оплаты смены цены лота.


*/
type GetChangePriceInvoice struct {
	Context *middleware.Context
	Handler GetChangePriceInvoiceHandler
}

func (o *GetChangePriceInvoice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetChangePriceInvoiceParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
