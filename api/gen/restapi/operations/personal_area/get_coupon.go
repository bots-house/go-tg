// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// GetCouponHandlerFunc turns a function with the right signature into a get coupon handler
type GetCouponHandlerFunc func(GetCouponParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCouponHandlerFunc) Handle(params GetCouponParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// GetCouponHandler interface for that can handle valid get coupon params
type GetCouponHandler interface {
	Handle(GetCouponParams, *authz.Identity) middleware.Responder
}

// NewGetCoupon creates a new http.Handler for the get coupon operation
func NewGetCoupon(ctx *middleware.Context, handler GetCouponHandler) *GetCoupon {
	return &GetCoupon{Context: ctx, Handler: handler}
}

/*GetCoupon swagger:route GET /coupons/{code} personal-area getCoupon

Get Coupon

Получить информацию о купоне.

Возможные ошибки:
  - `coupon_is_not_valid_for_payment` - Купон не предназначен для этого типа платежа;
  - `coupon_expired` - Срок годности купона истек;
  - `coupon_max_user_applying_limit` - Лимит использования купона пользователем превышен;
  - `coupon_max_applying_limit` - Лимит использования купона превышен;
  - `coupon_not_found` - Купона не существует;


*/
type GetCoupon struct {
	Context *middleware.Context
	Handler GetCouponHandler
}

func (o *GetCoupon) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCouponParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
