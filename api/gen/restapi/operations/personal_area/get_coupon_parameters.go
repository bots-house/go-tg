// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetCouponParams creates a new GetCouponParams object
// no default values defined in spec.
func NewGetCouponParams() GetCouponParams {

	return GetCouponParams{}
}

// GetCouponParams contains all the bound params for the get coupon operation
// typically these are obtained from a http.Request
//
// swagger:parameters getCoupon
type GetCouponParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Код купона.
	  Required: true
	  In: path
	*/
	Code string
	/*Для какого платежа.
	  Required: true
	  In: query
	*/
	Purpose string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCouponParams() beforehand.
func (o *GetCouponParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rCode, rhkCode, _ := route.Params.GetOK("code")
	if err := o.bindCode(rCode, rhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qPurpose, qhkPurpose, _ := qs.GetOK("purpose")
	if err := o.bindPurpose(qPurpose, qhkPurpose, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCode binds and validates parameter Code from path.
func (o *GetCouponParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Code = raw

	return nil
}

// bindPurpose binds and validates parameter Purpose from query.
func (o *GetCouponParams) bindPurpose(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("purpose", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("purpose", "query", raw); err != nil {
		return err
	}

	o.Purpose = raw

	if err := o.validatePurpose(formats); err != nil {
		return err
	}

	return nil
}

// validatePurpose carries on validations for parameter Purpose
func (o *GetCouponParams) validatePurpose(formats strfmt.Registry) error {

	if err := validate.EnumCase("purpose", "query", o.Purpose, []interface{}{"change_price", "application"}, true); err != nil {
		return err
	}

	return nil
}
