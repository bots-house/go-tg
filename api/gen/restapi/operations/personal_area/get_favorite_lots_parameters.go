// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetFavoriteLotsParams creates a new GetFavoriteLotsParams object
// no default values defined in spec.
func NewGetFavoriteLotsParams() GetFavoriteLotsParams {

	return GetFavoriteLotsParams{}
}

// GetFavoriteLotsParams contains all the bound params for the get favorite lots operation
// typically these are obtained from a http.Request
//
// swagger:parameters getFavoriteLots
type GetFavoriteLotsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Лимит лотов.
	  In: query
	*/
	Limit *int64
	/*Офсет лотов.
	  In: query
	*/
	Offset *int64
	/*
	  In: query
	*/
	SortBy *string
	/*сортировать от меньшего к большему (`asc`), или от большего к меньшему (`desc`)
	  In: query
	*/
	SortByType *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetFavoriteLotsParams() beforehand.
func (o *GetFavoriteLotsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sort_by")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortByType, qhkSortByType, _ := qs.GetOK("sort_by_type")
	if err := o.bindSortByType(qSortByType, qhkSortByType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetFavoriteLotsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetFavoriteLotsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *GetFavoriteLotsParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SortBy = &raw

	if err := o.validateSortBy(formats); err != nil {
		return err
	}

	return nil
}

// validateSortBy carries on validations for parameter SortBy
func (o *GetFavoriteLotsParams) validateSortBy(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort_by", "query", *o.SortBy, []interface{}{"members_count", "price", "price_per_member", "price_per_view", "daily_coverage", "monthly_income", "payback_period", "created_at"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortByType binds and validates parameter SortByType from query.
func (o *GetFavoriteLotsParams) bindSortByType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SortByType = &raw

	if err := o.validateSortByType(formats); err != nil {
		return err
	}

	return nil
}

// validateSortByType carries on validations for parameter SortByType
func (o *GetFavoriteLotsParams) validateSortByType(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort_by_type", "query", *o.SortByType, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}
