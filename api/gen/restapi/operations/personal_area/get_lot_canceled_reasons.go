// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetLotCanceledReasonsHandlerFunc turns a function with the right signature into a get lot canceled reasons handler
type GetLotCanceledReasonsHandlerFunc func(GetLotCanceledReasonsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLotCanceledReasonsHandlerFunc) Handle(params GetLotCanceledReasonsParams) middleware.Responder {
	return fn(params)
}

// GetLotCanceledReasonsHandler interface for that can handle valid get lot canceled reasons params
type GetLotCanceledReasonsHandler interface {
	Handle(GetLotCanceledReasonsParams) middleware.Responder
}

// NewGetLotCanceledReasons creates a new http.Handler for the get lot canceled reasons operation
func NewGetLotCanceledReasons(ctx *middleware.Context, handler GetLotCanceledReasonsHandler) *GetLotCanceledReasons {
	return &GetLotCanceledReasons{Context: ctx, Handler: handler}
}

/*GetLotCanceledReasons swagger:route GET /lot-canceled-reasons personal-area getLotCanceledReasons

Get Lot Canceled Reasons

Возвращает список причин для снятия лота с продажи.


*/
type GetLotCanceledReasons struct {
	Context *middleware.Context
	Handler GetLotCanceledReasonsHandler
}

func (o *GetLotCanceledReasons) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLotCanceledReasonsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
