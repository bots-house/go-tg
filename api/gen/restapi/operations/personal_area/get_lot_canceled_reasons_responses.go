// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// GetLotCanceledReasonsOKCode is the HTTP code returned for type GetLotCanceledReasonsOK
const GetLotCanceledReasonsOKCode int = 200

/*GetLotCanceledReasonsOK OK

swagger:response getLotCanceledReasonsOK
*/
type GetLotCanceledReasonsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.LotCanceledReason `json:"body,omitempty"`
}

// NewGetLotCanceledReasonsOK creates GetLotCanceledReasonsOK with default headers values
func NewGetLotCanceledReasonsOK() *GetLotCanceledReasonsOK {

	return &GetLotCanceledReasonsOK{}
}

// WithPayload adds the payload to the get lot canceled reasons o k response
func (o *GetLotCanceledReasonsOK) WithPayload(payload []*models.LotCanceledReason) *GetLotCanceledReasonsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get lot canceled reasons o k response
func (o *GetLotCanceledReasonsOK) SetPayload(payload []*models.LotCanceledReason) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLotCanceledReasonsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.LotCanceledReason, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetLotCanceledReasonsBadRequestCode is the HTTP code returned for type GetLotCanceledReasonsBadRequest
const GetLotCanceledReasonsBadRequestCode int = 400

/*GetLotCanceledReasonsBadRequest Bad Request

swagger:response getLotCanceledReasonsBadRequest
*/
type GetLotCanceledReasonsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLotCanceledReasonsBadRequest creates GetLotCanceledReasonsBadRequest with default headers values
func NewGetLotCanceledReasonsBadRequest() *GetLotCanceledReasonsBadRequest {

	return &GetLotCanceledReasonsBadRequest{}
}

// WithPayload adds the payload to the get lot canceled reasons bad request response
func (o *GetLotCanceledReasonsBadRequest) WithPayload(payload *models.Error) *GetLotCanceledReasonsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get lot canceled reasons bad request response
func (o *GetLotCanceledReasonsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLotCanceledReasonsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLotCanceledReasonsInternalServerErrorCode is the HTTP code returned for type GetLotCanceledReasonsInternalServerError
const GetLotCanceledReasonsInternalServerErrorCode int = 500

/*GetLotCanceledReasonsInternalServerError Internal Server Error

swagger:response getLotCanceledReasonsInternalServerError
*/
type GetLotCanceledReasonsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLotCanceledReasonsInternalServerError creates GetLotCanceledReasonsInternalServerError with default headers values
func NewGetLotCanceledReasonsInternalServerError() *GetLotCanceledReasonsInternalServerError {

	return &GetLotCanceledReasonsInternalServerError{}
}

// WithPayload adds the payload to the get lot canceled reasons internal server error response
func (o *GetLotCanceledReasonsInternalServerError) WithPayload(payload *models.Error) *GetLotCanceledReasonsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get lot canceled reasons internal server error response
func (o *GetLotCanceledReasonsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLotCanceledReasonsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
