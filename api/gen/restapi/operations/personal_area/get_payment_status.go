// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/bots-house/birzzha/api/authz"
)

// GetPaymentStatusHandlerFunc turns a function with the right signature into a get payment status handler
type GetPaymentStatusHandlerFunc func(GetPaymentStatusParams, *authz.Identity) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPaymentStatusHandlerFunc) Handle(params GetPaymentStatusParams, principal *authz.Identity) middleware.Responder {
	return fn(params, principal)
}

// GetPaymentStatusHandler interface for that can handle valid get payment status params
type GetPaymentStatusHandler interface {
	Handle(GetPaymentStatusParams, *authz.Identity) middleware.Responder
}

// NewGetPaymentStatus creates a new http.Handler for the get payment status operation
func NewGetPaymentStatus(ctx *middleware.Context, handler GetPaymentStatusHandler) *GetPaymentStatus {
	return &GetPaymentStatus{Context: ctx, Handler: handler}
}

/*GetPaymentStatus swagger:route GET /payments/{id}/status personal-area getPaymentStatus

Get Payment Status

Получить статус платежа по его ID.


*/
type GetPaymentStatus struct {
	Context *middleware.Context
	Handler GetPaymentStatusHandler
}

func (o *GetPaymentStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPaymentStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authz.Identity
	if uprinc != nil {
		principal = uprinc.(*authz.Identity) // this is really a authz.Identity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
