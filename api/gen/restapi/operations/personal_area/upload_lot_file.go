// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UploadLotFileHandlerFunc turns a function with the right signature into a upload lot file handler
type UploadLotFileHandlerFunc func(UploadLotFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadLotFileHandlerFunc) Handle(params UploadLotFileParams) middleware.Responder {
	return fn(params)
}

// UploadLotFileHandler interface for that can handle valid upload lot file params
type UploadLotFileHandler interface {
	Handle(UploadLotFileParams) middleware.Responder
}

// NewUploadLotFile creates a new http.Handler for the upload lot file operation
func NewUploadLotFile(ctx *middleware.Context, handler UploadLotFileHandler) *UploadLotFile {
	return &UploadLotFile{Context: ctx, Handler: handler}
}

/*UploadLotFile swagger:route POST /lots/file personal-area uploadLotFile

Upload File

Загрузка файла для лота.

Возможные ошибки:
  - `lot_file_size_is_large` - Размер файла превышает 6MB;
  - `lot_file_extension_is_wrong` - Расширение файла не входит в список доступных (pdf, png, jpeg);


*/
type UploadLotFile struct {
	Context *middleware.Context
	Handler UploadLotFileHandler
}

func (o *UploadLotFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUploadLotFileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
