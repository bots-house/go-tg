// Code generated by go-swagger; DO NOT EDIT.

package personal_area

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bots-house/birzzha/api/gen/models"
)

// UploadLotFileCreatedCode is the HTTP code returned for type UploadLotFileCreated
const UploadLotFileCreatedCode int = 201

/*UploadLotFileCreated OK

swagger:response uploadLotFileCreated
*/
type UploadLotFileCreated struct {

	/*
	  In: Body
	*/
	Payload *models.LotUploadedFile `json:"body,omitempty"`
}

// NewUploadLotFileCreated creates UploadLotFileCreated with default headers values
func NewUploadLotFileCreated() *UploadLotFileCreated {

	return &UploadLotFileCreated{}
}

// WithPayload adds the payload to the upload lot file created response
func (o *UploadLotFileCreated) WithPayload(payload *models.LotUploadedFile) *UploadLotFileCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload lot file created response
func (o *UploadLotFileCreated) SetPayload(payload *models.LotUploadedFile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadLotFileCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadLotFileBadRequestCode is the HTTP code returned for type UploadLotFileBadRequest
const UploadLotFileBadRequestCode int = 400

/*UploadLotFileBadRequest Bad Request

swagger:response uploadLotFileBadRequest
*/
type UploadLotFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadLotFileBadRequest creates UploadLotFileBadRequest with default headers values
func NewUploadLotFileBadRequest() *UploadLotFileBadRequest {

	return &UploadLotFileBadRequest{}
}

// WithPayload adds the payload to the upload lot file bad request response
func (o *UploadLotFileBadRequest) WithPayload(payload *models.Error) *UploadLotFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload lot file bad request response
func (o *UploadLotFileBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadLotFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadLotFileInternalServerErrorCode is the HTTP code returned for type UploadLotFileInternalServerError
const UploadLotFileInternalServerErrorCode int = 500

/*UploadLotFileInternalServerError Internal Server Error

swagger:response uploadLotFileInternalServerError
*/
type UploadLotFileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadLotFileInternalServerError creates UploadLotFileInternalServerError with default headers values
func NewUploadLotFileInternalServerError() *UploadLotFileInternalServerError {

	return &UploadLotFileInternalServerError{}
}

// WithPayload adds the payload to the upload lot file internal server error response
func (o *UploadLotFileInternalServerError) WithPayload(payload *models.Error) *UploadLotFileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload lot file internal server error response
func (o *UploadLotFileInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadLotFileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
