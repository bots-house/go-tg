// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// HandleGatewayNotificationHandlerFunc turns a function with the right signature into a handle gateway notification handler
type HandleGatewayNotificationHandlerFunc func(HandleGatewayNotificationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn HandleGatewayNotificationHandlerFunc) Handle(params HandleGatewayNotificationParams) middleware.Responder {
	return fn(params)
}

// HandleGatewayNotificationHandler interface for that can handle valid handle gateway notification params
type HandleGatewayNotificationHandler interface {
	Handle(HandleGatewayNotificationParams) middleware.Responder
}

// NewHandleGatewayNotification creates a new http.Handler for the handle gateway notification operation
func NewHandleGatewayNotification(ctx *middleware.Context, handler HandleGatewayNotificationHandler) *HandleGatewayNotification {
	return &HandleGatewayNotification{Context: ctx, Handler: handler}
}

/*HandleGatewayNotification swagger:route POST /webhooks/gateways/{name} webhook handleGatewayNotification

Handle Gateway Notification

Обработка уведомления о изменении состояния платeжа


*/
type HandleGatewayNotification struct {
	Context *middleware.Context
	Handler HandleGatewayNotificationHandler
}

func (o *HandleGatewayNotification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewHandleGatewayNotificationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
