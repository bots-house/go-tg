// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CouponApply is an object representing the database table.
type CouponApply struct {
	ID        int `boil:"id" json:"id" toml:"id" yaml:"id"`
	CouponID  int `boil:"coupon_id" json:"coupon_id" toml:"coupon_id" yaml:"coupon_id"`
	PaymentID int `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`

	R *couponApplyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L couponApplyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CouponApplyColumns = struct {
	ID        string
	CouponID  string
	PaymentID string
}{
	ID:        "id",
	CouponID:  "coupon_id",
	PaymentID: "payment_id",
}

// Generated where

var CouponApplyWhere = struct {
	ID        whereHelperint
	CouponID  whereHelperint
	PaymentID whereHelperint
}{
	ID:        whereHelperint{field: "\"coupon_apply\".\"id\""},
	CouponID:  whereHelperint{field: "\"coupon_apply\".\"coupon_id\""},
	PaymentID: whereHelperint{field: "\"coupon_apply\".\"payment_id\""},
}

// CouponApplyRels is where relationship names are stored.
var CouponApplyRels = struct {
	Coupon  string
	Payment string
}{
	Coupon:  "Coupon",
	Payment: "Payment",
}

// couponApplyR is where relationships are stored.
type couponApplyR struct {
	Coupon  *Coupon  `boil:"Coupon" json:"Coupon" toml:"Coupon" yaml:"Coupon"`
	Payment *Payment `boil:"Payment" json:"Payment" toml:"Payment" yaml:"Payment"`
}

// NewStruct creates a new relationship struct
func (*couponApplyR) NewStruct() *couponApplyR {
	return &couponApplyR{}
}

// couponApplyL is where Load methods for each relationship are stored.
type couponApplyL struct{}

var (
	couponApplyAllColumns            = []string{"id", "coupon_id", "payment_id"}
	couponApplyColumnsWithoutDefault = []string{"coupon_id", "payment_id"}
	couponApplyColumnsWithDefault    = []string{"id"}
	couponApplyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CouponApplySlice is an alias for a slice of pointers to CouponApply.
	// This should generally be used opposed to []CouponApply.
	CouponApplySlice []*CouponApply

	couponApplyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	couponApplyType                 = reflect.TypeOf(&CouponApply{})
	couponApplyMapping              = queries.MakeStructMapping(couponApplyType)
	couponApplyPrimaryKeyMapping, _ = queries.BindMapping(couponApplyType, couponApplyMapping, couponApplyPrimaryKeyColumns)
	couponApplyInsertCacheMut       sync.RWMutex
	couponApplyInsertCache          = make(map[string]insertCache)
	couponApplyUpdateCacheMut       sync.RWMutex
	couponApplyUpdateCache          = make(map[string]updateCache)
	couponApplyUpsertCacheMut       sync.RWMutex
	couponApplyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single couponApply record from the query.
func (q couponApplyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CouponApply, error) {
	o := &CouponApply{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dal: failed to execute a one query for coupon_apply")
	}

	return o, nil
}

// All returns all CouponApply records from the query.
func (q couponApplyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CouponApplySlice, error) {
	var o []*CouponApply

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dal: failed to assign all query results to CouponApply slice")
	}

	return o, nil
}

// Count returns the count of all CouponApply records in the query.
func (q couponApplyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to count coupon_apply rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q couponApplyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dal: failed to check if coupon_apply exists")
	}

	return count > 0, nil
}

// Coupon pointed to by the foreign key.
func (o *CouponApply) Coupon(mods ...qm.QueryMod) couponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CouponID),
	}

	queryMods = append(queryMods, mods...)

	query := Coupons(queryMods...)
	queries.SetFrom(query.Query, "\"coupon\"")

	return query
}

// Payment pointed to by the foreign key.
func (o *CouponApply) Payment(mods ...qm.QueryMod) paymentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := Payments(queryMods...)
	queries.SetFrom(query.Query, "\"payment\"")

	return query
}

// LoadCoupon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (couponApplyL) LoadCoupon(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCouponApply interface{}, mods queries.Applicator) error {
	var slice []*CouponApply
	var object *CouponApply

	if singular {
		object = maybeCouponApply.(*CouponApply)
	} else {
		slice = *maybeCouponApply.(*[]*CouponApply)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &couponApplyR{}
		}
		args = append(args, object.CouponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponApplyR{}
			}

			for _, a := range args {
				if a == obj.CouponID {
					continue Outer
				}
			}

			args = append(args, obj.CouponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coupon`),
		qm.WhereIn(`coupon.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Coupon")
	}

	var resultSlice []*Coupon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Coupon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for coupon")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupon")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Coupon = foreign
		if foreign.R == nil {
			foreign.R = &couponR{}
		}
		foreign.R.CouponApplies = append(foreign.R.CouponApplies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CouponID == foreign.ID {
				local.R.Coupon = foreign
				if foreign.R == nil {
					foreign.R = &couponR{}
				}
				foreign.R.CouponApplies = append(foreign.R.CouponApplies, local)
				break
			}
		}
	}

	return nil
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (couponApplyL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCouponApply interface{}, mods queries.Applicator) error {
	var slice []*CouponApply
	var object *CouponApply

	if singular {
		object = maybeCouponApply.(*CouponApply)
	} else {
		slice = *maybeCouponApply.(*[]*CouponApply)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &couponApplyR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponApplyR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payment`),
		qm.WhereIn(`payment.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentR{}
		}
		foreign.R.CouponApplies = append(foreign.R.CouponApplies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.ID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.CouponApplies = append(foreign.R.CouponApplies, local)
				break
			}
		}
	}

	return nil
}

// SetCoupon of the couponApply to the related item.
// Sets o.R.Coupon to related.
// Adds o to related.R.CouponApplies.
func (o *CouponApply) SetCoupon(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Coupon) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"coupon_apply\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"coupon_id"}),
		strmangle.WhereClause("\"", "\"", 2, couponApplyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CouponID = related.ID
	if o.R == nil {
		o.R = &couponApplyR{
			Coupon: related,
		}
	} else {
		o.R.Coupon = related
	}

	if related.R == nil {
		related.R = &couponR{
			CouponApplies: CouponApplySlice{o},
		}
	} else {
		related.R.CouponApplies = append(related.R.CouponApplies, o)
	}

	return nil
}

// SetPayment of the couponApply to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.CouponApplies.
func (o *CouponApply) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"coupon_apply\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"payment_id"}),
		strmangle.WhereClause("\"", "\"", 2, couponApplyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.ID
	if o.R == nil {
		o.R = &couponApplyR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentR{
			CouponApplies: CouponApplySlice{o},
		}
	} else {
		related.R.CouponApplies = append(related.R.CouponApplies, o)
	}

	return nil
}

// CouponApplies retrieves all the records using an executor.
func CouponApplies(mods ...qm.QueryMod) couponApplyQuery {
	mods = append(mods, qm.From("\"coupon_apply\""))
	return couponApplyQuery{NewQuery(mods...)}
}

// FindCouponApply retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCouponApply(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CouponApply, error) {
	couponApplyObj := &CouponApply{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"coupon_apply\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, couponApplyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dal: unable to select from coupon_apply")
	}

	return couponApplyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CouponApply) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dal: no coupon_apply provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(couponApplyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	couponApplyInsertCacheMut.RLock()
	cache, cached := couponApplyInsertCache[key]
	couponApplyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			couponApplyAllColumns,
			couponApplyColumnsWithDefault,
			couponApplyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(couponApplyType, couponApplyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(couponApplyType, couponApplyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"coupon_apply\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"coupon_apply\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dal: unable to insert into coupon_apply")
	}

	if !cached {
		couponApplyInsertCacheMut.Lock()
		couponApplyInsertCache[key] = cache
		couponApplyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CouponApply.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CouponApply) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	couponApplyUpdateCacheMut.RLock()
	cache, cached := couponApplyUpdateCache[key]
	couponApplyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			couponApplyAllColumns,
			couponApplyPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("dal: unable to update coupon_apply, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"coupon_apply\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, couponApplyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(couponApplyType, couponApplyMapping, append(wl, couponApplyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to update coupon_apply row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by update for coupon_apply")
	}

	if !cached {
		couponApplyUpdateCacheMut.Lock()
		couponApplyUpdateCache[key] = cache
		couponApplyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q couponApplyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to update all for coupon_apply")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to retrieve rows affected for coupon_apply")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CouponApplySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponApplyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"coupon_apply\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, couponApplyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to update all in couponApply slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to retrieve rows affected all in update all couponApply")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CouponApply) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dal: no coupon_apply provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(couponApplyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	couponApplyUpsertCacheMut.RLock()
	cache, cached := couponApplyUpsertCache[key]
	couponApplyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			couponApplyAllColumns,
			couponApplyColumnsWithDefault,
			couponApplyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			couponApplyAllColumns,
			couponApplyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dal: unable to upsert coupon_apply, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(couponApplyPrimaryKeyColumns))
			copy(conflict, couponApplyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"coupon_apply\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(couponApplyType, couponApplyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(couponApplyType, couponApplyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dal: unable to upsert coupon_apply")
	}

	if !cached {
		couponApplyUpsertCacheMut.Lock()
		couponApplyUpsertCache[key] = cache
		couponApplyUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CouponApply record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CouponApply) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dal: no CouponApply provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), couponApplyPrimaryKeyMapping)
	sql := "DELETE FROM \"coupon_apply\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to delete from coupon_apply")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by delete for coupon_apply")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q couponApplyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dal: no couponApplyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to delete all from coupon_apply")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by deleteall for coupon_apply")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CouponApplySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponApplyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"coupon_apply\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponApplyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to delete all from couponApply slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by deleteall for coupon_apply")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CouponApply) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCouponApply(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CouponApplySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CouponApplySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponApplyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"coupon_apply\".* FROM \"coupon_apply\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponApplyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dal: unable to reload all in CouponApplySlice")
	}

	*o = slice

	return nil
}

// CouponApplyExists checks if the CouponApply row exists.
func CouponApplyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"coupon_apply\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dal: unable to check if coupon_apply exists")
	}

	return exists, nil
}
