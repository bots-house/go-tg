// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LotCanceledReason is an object representing the database table.
type LotCanceledReason struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Why       string    `boil:"why" json:"why" toml:"why" yaml:"why"`
	IsPublic  bool      `boil:"is_public" json:"is_public" toml:"is_public" yaml:"is_public"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *lotCanceledReasonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lotCanceledReasonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LotCanceledReasonColumns = struct {
	ID        string
	Why       string
	IsPublic  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Why:       "why",
	IsPublic:  "is_public",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var LotCanceledReasonWhere = struct {
	ID        whereHelperint
	Why       whereHelperstring
	IsPublic  whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"lot_canceled_reason\".\"id\""},
	Why:       whereHelperstring{field: "\"lot_canceled_reason\".\"why\""},
	IsPublic:  whereHelperbool{field: "\"lot_canceled_reason\".\"is_public\""},
	CreatedAt: whereHelpertime_Time{field: "\"lot_canceled_reason\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"lot_canceled_reason\".\"updated_at\""},
}

// LotCanceledReasonRels is where relationship names are stored.
var LotCanceledReasonRels = struct {
	CanceledReasonLots string
}{
	CanceledReasonLots: "CanceledReasonLots",
}

// lotCanceledReasonR is where relationships are stored.
type lotCanceledReasonR struct {
	CanceledReasonLots LotSlice `boil:"CanceledReasonLots" json:"CanceledReasonLots" toml:"CanceledReasonLots" yaml:"CanceledReasonLots"`
}

// NewStruct creates a new relationship struct
func (*lotCanceledReasonR) NewStruct() *lotCanceledReasonR {
	return &lotCanceledReasonR{}
}

// lotCanceledReasonL is where Load methods for each relationship are stored.
type lotCanceledReasonL struct{}

var (
	lotCanceledReasonAllColumns            = []string{"id", "why", "is_public", "created_at", "updated_at"}
	lotCanceledReasonColumnsWithoutDefault = []string{"why", "is_public", "created_at", "updated_at"}
	lotCanceledReasonColumnsWithDefault    = []string{"id"}
	lotCanceledReasonPrimaryKeyColumns     = []string{"id"}
)

type (
	// LotCanceledReasonSlice is an alias for a slice of pointers to LotCanceledReason.
	// This should generally be used opposed to []LotCanceledReason.
	LotCanceledReasonSlice []*LotCanceledReason

	lotCanceledReasonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lotCanceledReasonType                 = reflect.TypeOf(&LotCanceledReason{})
	lotCanceledReasonMapping              = queries.MakeStructMapping(lotCanceledReasonType)
	lotCanceledReasonPrimaryKeyMapping, _ = queries.BindMapping(lotCanceledReasonType, lotCanceledReasonMapping, lotCanceledReasonPrimaryKeyColumns)
	lotCanceledReasonInsertCacheMut       sync.RWMutex
	lotCanceledReasonInsertCache          = make(map[string]insertCache)
	lotCanceledReasonUpdateCacheMut       sync.RWMutex
	lotCanceledReasonUpdateCache          = make(map[string]updateCache)
	lotCanceledReasonUpsertCacheMut       sync.RWMutex
	lotCanceledReasonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single lotCanceledReason record from the query.
func (q lotCanceledReasonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LotCanceledReason, error) {
	o := &LotCanceledReason{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dal: failed to execute a one query for lot_canceled_reason")
	}

	return o, nil
}

// All returns all LotCanceledReason records from the query.
func (q lotCanceledReasonQuery) All(ctx context.Context, exec boil.ContextExecutor) (LotCanceledReasonSlice, error) {
	var o []*LotCanceledReason

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dal: failed to assign all query results to LotCanceledReason slice")
	}

	return o, nil
}

// Count returns the count of all LotCanceledReason records in the query.
func (q lotCanceledReasonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to count lot_canceled_reason rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lotCanceledReasonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dal: failed to check if lot_canceled_reason exists")
	}

	return count > 0, nil
}

// CanceledReasonLots retrieves all the lot's Lots with an executor via canceled_reason_id column.
func (o *LotCanceledReason) CanceledReasonLots(mods ...qm.QueryMod) lotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lot\".\"canceled_reason_id\"=?", o.ID),
	)

	query := Lots(queryMods...)
	queries.SetFrom(query.Query, "\"lot\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"lot\".*"})
	}

	return query
}

// LoadCanceledReasonLots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lotCanceledReasonL) LoadCanceledReasonLots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLotCanceledReason interface{}, mods queries.Applicator) error {
	var slice []*LotCanceledReason
	var object *LotCanceledReason

	if singular {
		object = maybeLotCanceledReason.(*LotCanceledReason)
	} else {
		slice = *maybeLotCanceledReason.(*[]*LotCanceledReason)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lotCanceledReasonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lotCanceledReasonR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lot`),
		qm.WhereIn(`lot.canceled_reason_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lot")
	}

	var resultSlice []*Lot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lot")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lot")
	}

	if singular {
		object.R.CanceledReasonLots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &lotR{}
			}
			foreign.R.CanceledReason = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CanceledReasonID) {
				local.R.CanceledReasonLots = append(local.R.CanceledReasonLots, foreign)
				if foreign.R == nil {
					foreign.R = &lotR{}
				}
				foreign.R.CanceledReason = local
				break
			}
		}
	}

	return nil
}

// AddCanceledReasonLots adds the given related objects to the existing relationships
// of the lot_canceled_reason, optionally inserting them as new records.
// Appends related to o.R.CanceledReasonLots.
// Sets related.R.CanceledReason appropriately.
func (o *LotCanceledReason) AddCanceledReasonLots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lot) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CanceledReasonID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lot\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"canceled_reason_id"}),
				strmangle.WhereClause("\"", "\"", 2, lotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CanceledReasonID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &lotCanceledReasonR{
			CanceledReasonLots: related,
		}
	} else {
		o.R.CanceledReasonLots = append(o.R.CanceledReasonLots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lotR{
				CanceledReason: o,
			}
		} else {
			rel.R.CanceledReason = o
		}
	}
	return nil
}

// SetCanceledReasonLots removes all previously related items of the
// lot_canceled_reason replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CanceledReason's CanceledReasonLots accordingly.
// Replaces o.R.CanceledReasonLots with related.
// Sets related.R.CanceledReason's CanceledReasonLots accordingly.
func (o *LotCanceledReason) SetCanceledReasonLots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lot) error {
	query := "update \"lot\" set \"canceled_reason_id\" = null where \"canceled_reason_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CanceledReasonLots {
			queries.SetScanner(&rel.CanceledReasonID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CanceledReason = nil
		}

		o.R.CanceledReasonLots = nil
	}
	return o.AddCanceledReasonLots(ctx, exec, insert, related...)
}

// RemoveCanceledReasonLots relationships from objects passed in.
// Removes related items from R.CanceledReasonLots (uses pointer comparison, removal does not keep order)
// Sets related.R.CanceledReason.
func (o *LotCanceledReason) RemoveCanceledReasonLots(ctx context.Context, exec boil.ContextExecutor, related ...*Lot) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CanceledReasonID, nil)
		if rel.R != nil {
			rel.R.CanceledReason = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("canceled_reason_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CanceledReasonLots {
			if rel != ri {
				continue
			}

			ln := len(o.R.CanceledReasonLots)
			if ln > 1 && i < ln-1 {
				o.R.CanceledReasonLots[i] = o.R.CanceledReasonLots[ln-1]
			}
			o.R.CanceledReasonLots = o.R.CanceledReasonLots[:ln-1]
			break
		}
	}

	return nil
}

// LotCanceledReasons retrieves all the records using an executor.
func LotCanceledReasons(mods ...qm.QueryMod) lotCanceledReasonQuery {
	mods = append(mods, qm.From("\"lot_canceled_reason\""))
	return lotCanceledReasonQuery{NewQuery(mods...)}
}

// FindLotCanceledReason retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLotCanceledReason(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*LotCanceledReason, error) {
	lotCanceledReasonObj := &LotCanceledReason{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lot_canceled_reason\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lotCanceledReasonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dal: unable to select from lot_canceled_reason")
	}

	return lotCanceledReasonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LotCanceledReason) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dal: no lot_canceled_reason provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(lotCanceledReasonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lotCanceledReasonInsertCacheMut.RLock()
	cache, cached := lotCanceledReasonInsertCache[key]
	lotCanceledReasonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lotCanceledReasonAllColumns,
			lotCanceledReasonColumnsWithDefault,
			lotCanceledReasonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lotCanceledReasonType, lotCanceledReasonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lotCanceledReasonType, lotCanceledReasonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lot_canceled_reason\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lot_canceled_reason\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dal: unable to insert into lot_canceled_reason")
	}

	if !cached {
		lotCanceledReasonInsertCacheMut.Lock()
		lotCanceledReasonInsertCache[key] = cache
		lotCanceledReasonInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the LotCanceledReason.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LotCanceledReason) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	lotCanceledReasonUpdateCacheMut.RLock()
	cache, cached := lotCanceledReasonUpdateCache[key]
	lotCanceledReasonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lotCanceledReasonAllColumns,
			lotCanceledReasonPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("dal: unable to update lot_canceled_reason, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lot_canceled_reason\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lotCanceledReasonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lotCanceledReasonType, lotCanceledReasonMapping, append(wl, lotCanceledReasonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to update lot_canceled_reason row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by update for lot_canceled_reason")
	}

	if !cached {
		lotCanceledReasonUpdateCacheMut.Lock()
		lotCanceledReasonUpdateCache[key] = cache
		lotCanceledReasonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q lotCanceledReasonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to update all for lot_canceled_reason")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to retrieve rows affected for lot_canceled_reason")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LotCanceledReasonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lotCanceledReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lot_canceled_reason\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lotCanceledReasonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to update all in lotCanceledReason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to retrieve rows affected all in update all lotCanceledReason")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LotCanceledReason) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dal: no lot_canceled_reason provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(lotCanceledReasonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lotCanceledReasonUpsertCacheMut.RLock()
	cache, cached := lotCanceledReasonUpsertCache[key]
	lotCanceledReasonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lotCanceledReasonAllColumns,
			lotCanceledReasonColumnsWithDefault,
			lotCanceledReasonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lotCanceledReasonAllColumns,
			lotCanceledReasonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dal: unable to upsert lot_canceled_reason, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(lotCanceledReasonPrimaryKeyColumns))
			copy(conflict, lotCanceledReasonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lot_canceled_reason\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(lotCanceledReasonType, lotCanceledReasonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lotCanceledReasonType, lotCanceledReasonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dal: unable to upsert lot_canceled_reason")
	}

	if !cached {
		lotCanceledReasonUpsertCacheMut.Lock()
		lotCanceledReasonUpsertCache[key] = cache
		lotCanceledReasonUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single LotCanceledReason record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LotCanceledReason) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dal: no LotCanceledReason provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lotCanceledReasonPrimaryKeyMapping)
	sql := "DELETE FROM \"lot_canceled_reason\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to delete from lot_canceled_reason")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by delete for lot_canceled_reason")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lotCanceledReasonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dal: no lotCanceledReasonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to delete all from lot_canceled_reason")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by deleteall for lot_canceled_reason")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LotCanceledReasonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lotCanceledReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lot_canceled_reason\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lotCanceledReasonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dal: unable to delete all from lotCanceledReason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dal: failed to get rows affected by deleteall for lot_canceled_reason")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LotCanceledReason) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLotCanceledReason(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LotCanceledReasonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LotCanceledReasonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lotCanceledReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lot_canceled_reason\".* FROM \"lot_canceled_reason\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lotCanceledReasonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dal: unable to reload all in LotCanceledReasonSlice")
	}

	*o = slice

	return nil
}

// LotCanceledReasonExists checks if the LotCanceledReason row exists.
func LotCanceledReasonExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lot_canceled_reason\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dal: unable to check if lot_canceled_reason exists")
	}

	return exists, nil
}
